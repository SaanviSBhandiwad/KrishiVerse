{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# KrishiGrow - Gamified Sustainable Farming Platform\n\n## Overview\n\nKrishiGrow is a gamified digital platform designed to educate and motivate farmers to adopt sustainable agricultural practices. The application combines modern web technologies with agricultural education through personalized quests, virtual farm management, and community engagement features. Built as a full-stack web application, it targets farmers in rural India with multilingual support and mobile-first design principles.\n\nThe platform transforms traditional farming education into an engaging experience by creating virtual farm environments that mirror real-world conditions, offering region-specific sustainable farming quests, and providing community-based leaderboards for motivation and social recognition.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side application is built using React with TypeScript, emphasizing a mobile-first approach suitable for rural smartphone users. The architecture leverages Vite for development and build tooling, providing fast hot-reload capabilities and optimized production builds.\n\nThe UI framework is based on shadcn/ui components built on top of Radix UI primitives, providing accessible and customizable interface elements. Tailwind CSS handles styling with a custom color palette reflecting agricultural themes (greens, earth tones). The design system supports multiple languages (English, Hindi, Telugu, Tamil) with text-to-speech capabilities for users with limited literacy.\n\nComponent architecture follows a modular pattern with reusable UI components, page-level components for different application sections, and custom hooks for shared logic. The navigation system adapts between mobile bottom navigation and desktop sidebar layouts.\n\n### Backend Architecture\nThe server architecture uses Express.js with TypeScript for the REST API, providing endpoints for user management, farm data, quests, progress tracking, and community features. The API design follows RESTful conventions with proper error handling and request validation.\n\nThe server implements a storage abstraction layer that defines interfaces for all data operations, making the system database-agnostic and testable. Route handlers use Zod schemas for request validation, ensuring type safety throughout the application.\n\n### State Management\nClient-side state management combines React Context for global user state (authentication, language preferences) with TanStack Query for server state management, caching, and data synchronization. This approach provides optimal performance for data-heavy agricultural applications while maintaining offline capabilities.\n\n### Data Architecture\nThe database schema uses Drizzle ORM with PostgreSQL, designed to handle complex agricultural data relationships. Key entities include Users, Farms (with detailed location and crop information), Quests (sustainable farming tasks), UserQuests (progress tracking), and various supporting tables for progress, schemes, and market data.\n\nThe schema supports hierarchical location data (State → District → Taluk → Gram Panchayat → Village) for precise regional targeting of content and community features. JSON fields store complex data like crop arrays and quest progress steps.\n\n### Internationalization and Accessibility\nThe platform implements comprehensive i18n support with translation functions and text-to-speech capabilities. Language switching affects both UI text and speech synthesis, making the platform accessible to users with varying literacy levels.\n\n### Development and Build System\nThe development environment uses Vite with specialized Replit plugins for cartographer integration and development banners. The build process creates both client-side static assets and server-side bundles optimized for production deployment.\n\nTypeScript configuration ensures type safety across the full stack with shared types between client and server, reducing integration errors and improving developer experience.\n\n## External Dependencies\n\n### Database and Storage\n- **Neon Database**: Serverless PostgreSQL database service providing scalable data storage\n- **Drizzle ORM**: Type-safe database toolkit for schema management and queries\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n### UI and Styling\n- **Radix UI**: Comprehensive set of low-level UI primitives for accessibility\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Lucide React**: Icon library with agricultural and general-purpose icons\n- **shadcn/ui**: Pre-built component library based on Radix primitives\n\n### Data Management and API\n- **TanStack Query**: Powerful data synchronization library for server state\n- **React Hook Form**: Forms library with validation support\n- **Zod**: Runtime type validation for API requests and responses\n\n### Development Tools\n- **Vite**: Fast build tool and development server\n- **TypeScript**: Static type checking across the full stack\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n### Replit Integration\n- **@replit/vite-plugin-cartographer**: Development environment integration\n- **@replit/vite-plugin-dev-banner**: Development mode indicators\n- **@replit/vite-plugin-runtime-error-modal**: Enhanced error reporting\n\n### Routing and Navigation\n- **Wouter**: Lightweight routing library optimized for single-page applications\n\n### Form Handling and Validation\n- **@hookform/resolvers**: Integration between React Hook Form and validation libraries\n- **drizzle-zod**: Automatic Zod schema generation from Drizzle schemas\n\nThe platform's external dependencies are carefully chosen to support offline-first functionality, mobile performance, and the specific needs of agricultural education in resource-constrained environments.","size_bytes":5887},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"pulse-glow\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n            transform: \"scale(1)\",\n          },\n          \"50%\": {\n            opacity: \"0.7\",\n            transform: \"scale(1.05)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"pulse-glow\": \"pulse-glow 2s infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3152},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertUserSchema, \n  insertFarmSchema, \n  insertUserQuestSchema,\n  insertUserSchemeSchema \n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // User routes\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.json(user);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid user data\" });\n    }\n  });\n\n  app.get(\"/api/users/:id\", async (req, res) => {\n    const user = await storage.getUser(req.params.id);\n    if (!user) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n    res.json(user);\n  });\n\n  app.get(\"/api/users/mobile/:mobile\", async (req, res) => {\n    const user = await storage.getUserByMobile(req.params.mobile);\n    if (!user) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n    res.json(user);\n  });\n\n  // Farm routes\n  app.post(\"/api/farms\", async (req, res) => {\n    try {\n      const farmData = insertFarmSchema.parse(req.body);\n      const farm = await storage.createFarm(farmData);\n      res.json(farm);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid farm data\" });\n    }\n  });\n\n  app.get(\"/api/farms/user/:userId\", async (req, res) => {\n    const farm = await storage.getFarmByUserId(req.params.userId);\n    if (!farm) {\n      return res.status(404).json({ error: \"Farm not found\" });\n    }\n    res.json(farm);\n  });\n\n  // Quest routes\n  app.get(\"/api/quests\", async (req, res) => {\n    const { category } = req.query;\n    let quests;\n    \n    if (category && typeof category === 'string') {\n      quests = await storage.getQuestsByCategory(category);\n    } else {\n      quests = await storage.getAllQuests();\n    }\n    \n    res.json(quests);\n  });\n\n  // User Quest routes\n  app.get(\"/api/user-quests/:userId\", async (req, res) => {\n    const userQuests = await storage.getUserQuests(req.params.userId);\n    res.json(userQuests);\n  });\n\n  app.post(\"/api/user-quests\", async (req, res) => {\n    try {\n      const userQuestData = insertUserQuestSchema.parse(req.body);\n      const userQuest = await storage.createUserQuest(userQuestData);\n      res.json(userQuest);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid user quest data\" });\n    }\n  });\n\n  app.patch(\"/api/user-quests/:id\", async (req, res) => {\n    const userQuest = await storage.updateUserQuest(req.params.id, req.body);\n    if (!userQuest) {\n      return res.status(404).json({ error: \"User quest not found\" });\n    }\n    res.json(userQuest);\n  });\n\n  // Complete quest endpoint\n  app.post(\"/api/user-quests/:id/complete\", async (req, res) => {\n    const userQuest = await storage.updateUserQuest(req.params.id, {\n      status: \"completed\",\n      completedAt: new Date()\n    });\n    \n    if (!userQuest) {\n      return res.status(404).json({ error: \"User quest not found\" });\n    }\n\n    // Update user progress\n    const progress = await storage.getUserProgress(userQuest.userId);\n    if (progress) {\n      const quest = await storage.getAllQuests();\n      const questData = quest.find(q => q.id === userQuest.questId);\n      \n      if (questData) {\n        await storage.updateUserProgress(userQuest.userId, {\n          totalXp: progress.totalXp + questData.xpReward,\n          totalCoins: progress.totalCoins + questData.coinReward,\n          completedQuests: progress.completedQuests + 1,\n          sustainabilityScore: progress.sustainabilityScore + Math.floor(questData.xpReward / 2),\n          badges: questData.badgeReward ? [...progress.badges, questData.badgeReward] : progress.badges\n        });\n      }\n    }\n\n    res.json(userQuest);\n  });\n\n  // User Progress routes\n  app.get(\"/api/user-progress/:userId\", async (req, res) => {\n    const progress = await storage.getUserProgress(req.params.userId);\n    if (!progress) {\n      return res.status(404).json({ error: \"User progress not found\" });\n    }\n    res.json(progress);\n  });\n\n  // Scheme routes\n  app.get(\"/api/schemes\", async (req, res) => {\n    const { category } = req.query;\n    let schemes;\n    \n    if (category && typeof category === 'string') {\n      schemes = await storage.getSchemesByCategory(category);\n    } else {\n      schemes = await storage.getAllSchemes();\n    }\n    \n    res.json(schemes);\n  });\n\n  // User Scheme routes\n  app.get(\"/api/user-schemes/:userId\", async (req, res) => {\n    const userSchemes = await storage.getUserSchemes(req.params.userId);\n    res.json(userSchemes);\n  });\n\n  app.post(\"/api/user-schemes\", async (req, res) => {\n    try {\n      const userSchemeData = insertUserSchemeSchema.parse(req.body);\n      const userScheme = await storage.createUserScheme(userSchemeData);\n      res.json(userScheme);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid user scheme data\" });\n    }\n  });\n\n  // Market routes\n  app.get(\"/api/market-prices\", async (req, res) => {\n    const { district, crop } = req.query;\n    let prices;\n    \n    if (crop && typeof crop === 'string') {\n      prices = await storage.getLatestPricesByCrop(crop);\n    } else {\n      prices = await storage.getMarketPrices(district as string);\n    }\n    \n    res.json(prices);\n  });\n\n  // Leaderboard routes\n  app.get(\"/api/leaderboard\", async (req, res) => {\n    const { gramPanchayat, district } = req.query;\n    const leaderboard = await storage.getLeaderboard(\n      gramPanchayat as string, \n      district as string\n    );\n    res.json(leaderboard);\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":5709},"server/storage.ts":{"content":"import { \n  type User, type InsertUser,\n  type Farm, type InsertFarm,\n  type Quest, type InsertQuest,\n  type UserQuest, type InsertUserQuest,\n  type UserProgress, type InsertUserProgress,\n  type Scheme, type InsertScheme,\n  type UserScheme, type InsertUserScheme,\n  type MarketPrice, type InsertMarketPrice\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByMobile(mobileNumber: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n\n  // Farms\n  getFarmByUserId(userId: string): Promise<Farm | undefined>;\n  createFarm(farm: InsertFarm): Promise<Farm>;\n  updateFarm(id: string, updates: Partial<Farm>): Promise<Farm | undefined>;\n\n  // Quests\n  getAllQuests(): Promise<Quest[]>;\n  getQuestsByCategory(category: string): Promise<Quest[]>;\n  createQuest(quest: InsertQuest): Promise<Quest>;\n\n  // User Quests\n  getUserQuests(userId: string): Promise<UserQuest[]>;\n  getUserQuest(userId: string, questId: string): Promise<UserQuest | undefined>;\n  createUserQuest(userQuest: InsertUserQuest): Promise<UserQuest>;\n  updateUserQuest(id: string, updates: Partial<UserQuest>): Promise<UserQuest | undefined>;\n\n  // User Progress\n  getUserProgress(userId: string): Promise<UserProgress | undefined>;\n  createUserProgress(progress: InsertUserProgress): Promise<UserProgress>;\n  updateUserProgress(userId: string, updates: Partial<UserProgress>): Promise<UserProgress | undefined>;\n\n  // Schemes\n  getAllSchemes(): Promise<Scheme[]>;\n  getSchemesByCategory(category: string): Promise<Scheme[]>;\n  \n  // User Schemes\n  getUserSchemes(userId: string): Promise<UserScheme[]>;\n  createUserScheme(userScheme: InsertUserScheme): Promise<UserScheme>;\n  updateUserScheme(id: string, updates: Partial<UserScheme>): Promise<UserScheme | undefined>;\n\n  // Market Prices\n  getMarketPrices(district?: string): Promise<MarketPrice[]>;\n  getLatestPricesByCrop(crop: string): Promise<MarketPrice[]>;\n  createMarketPrice(price: InsertMarketPrice): Promise<MarketPrice>;\n\n  // Leaderboard\n  getLeaderboard(gramPanchayat?: string, district?: string): Promise<Array<{user: User, progress: UserProgress}>>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private farms: Map<string, Farm> = new Map();\n  private quests: Map<string, Quest> = new Map();\n  private userQuests: Map<string, UserQuest> = new Map();\n  private userProgress: Map<string, UserProgress> = new Map();\n  private schemes: Map<string, Scheme> = new Map();\n  private userSchemes: Map<string, UserScheme> = new Map();\n  private marketPrices: Map<string, MarketPrice> = new Map();\n\n  constructor() {\n    this.initializeDefaultData();\n  }\n\n  private initializeDefaultData() {\n    // Initialize default quests\n    const defaultQuests: InsertQuest[] = [\n      {\n        title: \"Prepare Jeevamrutha\",\n        description: \"Create organic liquid fertilizer using cow dung, cow urine, jaggery, and gram flour.\",\n        category: \"Soil Health\",\n        difficulty: \"medium\",\n        coinReward: 150,\n        xpReward: 10,\n        badgeReward: \"Compost Master\",\n        steps: [\n          \"Watch preparation video\",\n          \"Gather ingredients (cow dung, cow urine, jaggery, gram flour)\",\n          \"Mix and ferment for 7 days\",\n          \"Upload completion photo\"\n        ],\n        isActive: true\n      },\n      {\n        title: \"Install Drip Irrigation\",\n        description: \"Set up efficient drip irrigation system for water conservation in vegetable crops.\",\n        category: \"Water Management\",\n        difficulty: \"high\",\n        coinReward: 200,\n        xpReward: 15,\n        badgeReward: \"Water Saver\",\n        steps: [\n          \"Plan irrigation layout\",\n          \"Purchase drip irrigation kit\",\n          \"Install main pipeline\",\n          \"Connect drippers to plants\",\n          \"Test system and upload photo\"\n        ],\n        isActive: true\n      },\n      {\n        title: \"Plant Marigold Border\",\n        description: \"Plant marigold flowers around crop fields for natural pest control.\",\n        category: \"Pest Control\",\n        difficulty: \"easy\",\n        coinReward: 100,\n        xpReward: 8,\n        steps: [\n          \"Purchase marigold seeds\",\n          \"Prepare border areas\",\n          \"Sow seeds around field perimeter\",\n          \"Water and maintain for 2 weeks\",\n          \"Upload growth photo\"\n        ],\n        isActive: true\n      }\n    ];\n\n    defaultQuests.forEach(quest => {\n      const id = randomUUID();\n      this.quests.set(id, { \n        ...quest, \n        id, \n        createdAt: new Date(),\n        badgeReward: quest.badgeReward || null,\n        isActive: quest.isActive ?? true\n      });\n    });\n\n    // Initialize default schemes\n    const defaultSchemes: InsertScheme[] = [\n      {\n        name: \"PM-KISAN Scheme\",\n        description: \"Direct Income Support to small and marginal farmers\",\n        category: \"Income Support\",\n        eligibilityCriteria: [\n          \"Small and marginal farmer families\",\n          \"Land ownership records\",\n          \"Valid Aadhaar card\",\n          \"Bank account\"\n        ],\n        benefits: \"₹6,000 per year in three installments of ₹2,000 each\",\n        applicationSteps: [\n          \"Aadhaar verification\",\n          \"Bank account linking\",\n          \"Land ownership document upload\",\n          \"Visit Patwari for verification\",\n          \"Submit final application\"\n        ],\n        documentsRequired: [\n          \"Aadhaar Card\",\n          \"Bank Account Details\",\n          \"Land Ownership Documents\",\n          \"Mobile Number\"\n        ],\n        isActive: true\n      },\n      {\n        name: \"Drip Irrigation Subsidy\",\n        description: \"Water conservation subsidy for efficient irrigation systems\",\n        category: \"Water Conservation\",\n        eligibilityCriteria: [\n          \"Farmers with water source\",\n          \"Minimum 0.5 acre land\",\n          \"No previous subsidy for irrigation\"\n        ],\n        benefits: \"Up to 55% subsidy on drip irrigation system installation\",\n        applicationSteps: [\n          \"Technical assessment\",\n          \"Quotation submission\",\n          \"Approval and installation\",\n          \"Verification and payment\"\n        ],\n        documentsRequired: [\n          \"Land Documents\",\n          \"Water Source Certificate\",\n          \"Technical Quotation\",\n          \"Bank Details\"\n        ],\n        isActive: true\n      }\n    ];\n\n    defaultSchemes.forEach(scheme => {\n      const id = randomUUID();\n      this.schemes.set(id, { ...scheme, id, isActive: scheme.isActive ?? true });\n    });\n\n    // Initialize sample market prices\n    const samplePrices: InsertMarketPrice[] = [\n      {\n        crop: \"Wheat\",\n        variety: \"Premium\",\n        price: 2350,\n        unit: \"quintal\",\n        mandi: \"Wardha Mandi\",\n        district: \"Wardha\",\n        state: \"Maharashtra\",\n        date: new Date(),\n        trend: \"up\"\n      },\n      {\n        crop: \"Maize\",\n        variety: \"Standard\",\n        price: 1890,\n        unit: \"quintal\",\n        mandi: \"Wardha Mandi\",\n        district: \"Wardha\",\n        state: \"Maharashtra\",\n        date: new Date(),\n        trend: \"down\"\n      },\n      {\n        crop: \"Cotton\",\n        variety: \"Medium Staple\",\n        price: 5890,\n        unit: \"quintal\",\n        mandi: \"Wardha Mandi\",\n        district: \"Wardha\",\n        state: \"Maharashtra\",\n        date: new Date(),\n        trend: \"stable\"\n      }\n    ];\n\n    samplePrices.forEach(price => {\n      const id = randomUUID();\n      this.marketPrices.set(id, { \n        ...price, \n        id,\n        variety: price.variety || null,\n        unit: price.unit || \"quintal\",\n        trend: price.trend || null\n      });\n    });\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByMobile(mobileNumber: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.mobileNumber === mobileNumber);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id, createdAt: new Date(), language: insertUser.language || 'hi' };\n    this.users.set(id, user);\n    \n    // Create default user progress\n    await this.createUserProgress({\n      userId: id,\n      level: 1,\n      totalXp: 0,\n      totalCoins: 0,\n      sustainabilityScore: 0,\n      badges: [],\n      completedQuests: 0\n    });\n\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Farm methods\n  async getFarmByUserId(userId: string): Promise<Farm | undefined> {\n    return Array.from(this.farms.values()).find(farm => farm.userId === userId);\n  }\n\n  async createFarm(insertFarm: InsertFarm): Promise<Farm> {\n    const id = randomUUID();\n    const farm: Farm = { \n      ...insertFarm, \n      id, \n      createdAt: new Date(),\n      primaryCrops: insertFarm.primaryCrops as string[]\n    };\n    this.farms.set(id, farm);\n    return farm;\n  }\n\n  async updateFarm(id: string, updates: Partial<Farm>): Promise<Farm | undefined> {\n    const farm = this.farms.get(id);\n    if (!farm) return undefined;\n    \n    const updatedFarm = { ...farm, ...updates };\n    this.farms.set(id, updatedFarm);\n    return updatedFarm;\n  }\n\n  // Quest methods\n  async getAllQuests(): Promise<Quest[]> {\n    return Array.from(this.quests.values()).filter(quest => quest.isActive);\n  }\n\n  async getQuestsByCategory(category: string): Promise<Quest[]> {\n    return Array.from(this.quests.values()).filter(\n      quest => quest.isActive && quest.category === category\n    );\n  }\n\n  async createQuest(insertQuest: InsertQuest): Promise<Quest> {\n    const id = randomUUID();\n    const quest: Quest = { \n      ...insertQuest, \n      id, \n      createdAt: new Date(),\n      badgeReward: insertQuest.badgeReward || null,\n      isActive: insertQuest.isActive ?? true\n    };\n    this.quests.set(id, quest);\n    return quest;\n  }\n\n  // User Quest methods\n  async getUserQuests(userId: string): Promise<UserQuest[]> {\n    return Array.from(this.userQuests.values()).filter(uq => uq.userId === userId);\n  }\n\n  async getUserQuest(userId: string, questId: string): Promise<UserQuest | undefined> {\n    return Array.from(this.userQuests.values()).find(\n      uq => uq.userId === userId && uq.questId === questId\n    );\n  }\n\n  async createUserQuest(insertUserQuest: InsertUserQuest): Promise<UserQuest> {\n    const id = randomUUID();\n    const userQuest: UserQuest = { \n      ...insertUserQuest, \n      id, \n      createdAt: new Date(),\n      progress: (insertUserQuest.progress || []) as boolean[],\n      completedAt: insertUserQuest.completedAt || null,\n      status: insertUserQuest.status || 'not_started'\n    };\n    this.userQuests.set(id, userQuest);\n    return userQuest;\n  }\n\n  async updateUserQuest(id: string, updates: Partial<UserQuest>): Promise<UserQuest | undefined> {\n    const userQuest = this.userQuests.get(id);\n    if (!userQuest) return undefined;\n    \n    const updatedUserQuest = { ...userQuest, ...updates };\n    this.userQuests.set(id, updatedUserQuest);\n    return updatedUserQuest;\n  }\n\n  // User Progress methods\n  async getUserProgress(userId: string): Promise<UserProgress | undefined> {\n    return Array.from(this.userProgress.values()).find(up => up.userId === userId);\n  }\n\n  async createUserProgress(insertUserProgress: InsertUserProgress): Promise<UserProgress> {\n    const id = randomUUID();\n    const progress: UserProgress = { \n      ...insertUserProgress,\n      id,\n      level: insertUserProgress.level ?? 1,\n      totalXp: insertUserProgress.totalXp ?? 0,\n      totalCoins: insertUserProgress.totalCoins ?? 0,\n      sustainabilityScore: insertUserProgress.sustainabilityScore ?? 0,\n      badges: (insertUserProgress.badges || []) as string[],\n      completedQuests: insertUserProgress.completedQuests ?? 0\n    };\n    this.userProgress.set(id, progress);\n    return progress;\n  }\n\n  async updateUserProgress(userId: string, updates: Partial<UserProgress>): Promise<UserProgress | undefined> {\n    const progress = Array.from(this.userProgress.values()).find(up => up.userId === userId);\n    if (!progress) return undefined;\n    \n    const updatedProgress = { ...progress, ...updates };\n    this.userProgress.set(progress.id, updatedProgress);\n    return updatedProgress;\n  }\n\n  // Scheme methods\n  async getAllSchemes(): Promise<Scheme[]> {\n    return Array.from(this.schemes.values()).filter(scheme => scheme.isActive);\n  }\n\n  async getSchemesByCategory(category: string): Promise<Scheme[]> {\n    return Array.from(this.schemes.values()).filter(\n      scheme => scheme.isActive && scheme.category === category\n    );\n  }\n\n  // User Scheme methods\n  async getUserSchemes(userId: string): Promise<UserScheme[]> {\n    return Array.from(this.userSchemes.values()).filter(us => us.userId === userId);\n  }\n\n  async createUserScheme(insertUserScheme: InsertUserScheme): Promise<UserScheme> {\n    const id = randomUUID();\n    const userScheme: UserScheme = { \n      ...insertUserScheme, \n      id,\n      status: insertUserScheme.status || 'not_started',\n      applicationData: insertUserScheme.applicationData || {},\n      appliedAt: insertUserScheme.appliedAt || null,\n      approvedAt: insertUserScheme.approvedAt || null\n    };\n    this.userSchemes.set(id, userScheme);\n    return userScheme;\n  }\n\n  async updateUserScheme(id: string, updates: Partial<UserScheme>): Promise<UserScheme | undefined> {\n    const userScheme = this.userSchemes.get(id);\n    if (!userScheme) return undefined;\n    \n    const updatedUserScheme = { ...userScheme, ...updates };\n    this.userSchemes.set(id, updatedUserScheme);\n    return updatedUserScheme;\n  }\n\n  // Market Price methods\n  async getMarketPrices(district?: string): Promise<MarketPrice[]> {\n    const prices = Array.from(this.marketPrices.values());\n    if (district) {\n      return prices.filter(price => price.district === district);\n    }\n    return prices;\n  }\n\n  async getLatestPricesByCrop(crop: string): Promise<MarketPrice[]> {\n    return Array.from(this.marketPrices.values())\n      .filter(price => price.crop === crop)\n      .sort((a, b) => b.date.getTime() - a.date.getTime());\n  }\n\n  async createMarketPrice(insertMarketPrice: InsertMarketPrice): Promise<MarketPrice> {\n    const id = randomUUID();\n    const marketPrice: MarketPrice = { \n      ...insertMarketPrice, \n      id,\n      variety: insertMarketPrice.variety || null,\n      unit: insertMarketPrice.unit || \"quintal\", \n      trend: insertMarketPrice.trend || null\n    };\n    this.marketPrices.set(id, marketPrice);\n    return marketPrice;\n  }\n\n  // Leaderboard methods\n  async getLeaderboard(gramPanchayat?: string, district?: string): Promise<Array<{user: User, progress: UserProgress}>> {\n    const results: Array<{user: User, progress: UserProgress}> = [];\n    \n    for (const user of Array.from(this.users.values())) {\n      const progress = await this.getUserProgress(user.id);\n      if (progress) {\n        if (gramPanchayat || district) {\n          const farm = await this.getFarmByUserId(user.id);\n          if (farm && \n              (!gramPanchayat || farm.gramPanchayat === gramPanchayat) &&\n              (!district || farm.district === district)) {\n            results.push({ user, progress });\n          }\n        } else {\n          results.push({ user, progress });\n        }\n      }\n    }\n    \n    return results.sort((a, b) => b.progress.sustainabilityScore - a.progress.sustainabilityScore);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":15876},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  mobileNumber: text(\"mobile_number\").notNull().unique(),\n  ageGroup: text(\"age_group\").notNull(),\n  language: text(\"language\").notNull().default(\"hi\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const farms = pgTable(\"farms\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  state: text(\"state\").notNull(),\n  district: text(\"district\").notNull(),\n  taluk: text(\"taluk\").notNull(),\n  gramPanchayat: text(\"gram_panchayat\").notNull(),\n  village: text(\"village\").notNull(),\n  farmSize: text(\"farm_size\").notNull(),\n  soilType: text(\"soil_type\").notNull(),\n  primaryCrops: jsonb(\"primary_crops\").$type<string[]>().notNull(),\n  waterSource: text(\"water_source\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const quests = pgTable(\"quests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(),\n  difficulty: text(\"difficulty\").notNull(),\n  coinReward: integer(\"coin_reward\").notNull(),\n  xpReward: integer(\"xp_reward\").notNull(),\n  badgeReward: text(\"badge_reward\"),\n  steps: jsonb(\"steps\").$type<string[]>().notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userQuests = pgTable(\"user_quests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  questId: varchar(\"quest_id\").references(() => quests.id).notNull(),\n  status: text(\"status\").notNull().default(\"not_started\"), // not_started, in_progress, completed\n  progress: jsonb(\"progress\").$type<boolean[]>().notNull().default([]),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userProgress = pgTable(\"user_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull().unique(),\n  level: integer(\"level\").notNull().default(1),\n  totalXp: integer(\"total_xp\").notNull().default(0),\n  totalCoins: integer(\"total_coins\").notNull().default(0),\n  sustainabilityScore: integer(\"sustainability_score\").notNull().default(0),\n  badges: jsonb(\"badges\").$type<string[]>().notNull().default([]),\n  completedQuests: integer(\"completed_quests\").notNull().default(0),\n});\n\nexport const schemes = pgTable(\"schemes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(),\n  eligibilityCriteria: jsonb(\"eligibility_criteria\").$type<string[]>().notNull(),\n  benefits: text(\"benefits\").notNull(),\n  applicationSteps: jsonb(\"application_steps\").$type<string[]>().notNull(),\n  documentsRequired: jsonb(\"documents_required\").$type<string[]>().notNull(),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const userSchemes = pgTable(\"user_schemes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  schemeId: varchar(\"scheme_id\").references(() => schemes.id).notNull(),\n  status: text(\"status\").notNull().default(\"not_started\"), // not_started, in_progress, approved, rejected\n  applicationData: jsonb(\"application_data\").$type<Record<string, any>>().default({}),\n  appliedAt: timestamp(\"applied_at\"),\n  approvedAt: timestamp(\"approved_at\"),\n});\n\nexport const marketPrices = pgTable(\"market_prices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  crop: text(\"crop\").notNull(),\n  variety: text(\"variety\"),\n  price: integer(\"price\").notNull(),\n  unit: text(\"unit\").notNull().default(\"quintal\"),\n  mandi: text(\"mandi\").notNull(),\n  district: text(\"district\").notNull(),\n  state: text(\"state\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  trend: text(\"trend\"), // up, down, stable\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFarmSchema = createInsertSchema(farms).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertQuestSchema = createInsertSchema(quests).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserQuestSchema = createInsertSchema(userQuests).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserProgressSchema = createInsertSchema(userProgress).omit({\n  id: true,\n});\n\nexport const insertSchemeSchema = createInsertSchema(schemes).omit({\n  id: true,\n});\n\nexport const insertUserSchemeSchema = createInsertSchema(userSchemes).omit({\n  id: true,\n});\n\nexport const insertMarketPriceSchema = createInsertSchema(marketPrices).omit({\n  id: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Farm = typeof farms.$inferSelect;\nexport type InsertFarm = z.infer<typeof insertFarmSchema>;\n\nexport type Quest = typeof quests.$inferSelect;\nexport type InsertQuest = z.infer<typeof insertQuestSchema>;\n\nexport type UserQuest = typeof userQuests.$inferSelect;\nexport type InsertUserQuest = z.infer<typeof insertUserQuestSchema>;\n\nexport type UserProgress = typeof userProgress.$inferSelect;\nexport type InsertUserProgress = z.infer<typeof insertUserProgressSchema>;\n\nexport type Scheme = typeof schemes.$inferSelect;\nexport type InsertScheme = z.infer<typeof insertSchemeSchema>;\n\nexport type UserScheme = typeof userSchemes.$inferSelect;\nexport type InsertUserScheme = z.infer<typeof insertUserSchemeSchema>;\n\nexport type MarketPrice = typeof marketPrices.$inferSelect;\nexport type InsertMarketPrice = z.infer<typeof insertMarketPriceSchema>;\n","size_bytes":6168},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { UserProvider } from \"@/contexts/user-context\";\nimport Navigation from \"@/components/navigation\";\nimport NotFound from \"@/pages/not-found\";\nimport Welcome from \"@/pages/welcome\";\nimport Onboarding from \"@/pages/onboarding\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Quests from \"@/pages/quests\";\nimport Leaderboard from \"@/pages/leaderboard\";\nimport Schemes from \"@/pages/schemes\";\nimport Market from \"@/pages/market\";\nimport Profile from \"@/pages/profile\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Welcome} />\n      <Route path=\"/onboarding\" component={Onboarding} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/quests\" component={Quests} />\n      <Route path=\"/leaderboard\" component={Leaderboard} />\n      <Route path=\"/schemes\" component={Schemes} />\n      <Route path=\"/market\" component={Market} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <UserProvider>\n          <Navigation />\n          <Router />\n          <Toaster />\n        </UserProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1555},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Krishi-specific color palette */\n  --background: hsl(45, 20%, 98%);\n  --foreground: hsl(120, 15%, 15%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(120, 15%, 15%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(120, 15%, 15%);\n  --primary: hsl(95, 60%, 25%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(25, 65%, 35%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(45, 15%, 95%);\n  --muted-foreground: hsl(120, 10%, 45%);\n  --accent: hsl(45, 85%, 65%);\n  --accent-foreground: hsl(120, 15%, 15%);\n  --success: hsl(100, 60%, 45%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(45, 25%, 88%);\n  --input: hsl(45, 25%, 88%);\n  --ring: hsl(95, 60%, 25%);\n  --chart-1: hsl(95, 60%, 25%);\n  --chart-2: hsl(100, 60%, 45%);\n  --chart-3: hsl(45, 85%, 65%);\n  --chart-4: hsl(25, 65%, 35%);\n  --chart-5: hsl(120, 15%, 15%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(120, 15%, 15%);\n  --sidebar-primary: hsl(95, 60%, 25%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(45, 15%, 95%);\n  --sidebar-accent-foreground: hsl(95, 60%, 25%);\n  --sidebar-border: hsl(45, 25%, 88%);\n  --sidebar-ring: hsl(95, 60%, 25%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(95, 60%, 25%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(95, 60%, 25%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(95, 60%, 25%, 0.00), 0px 1px 2px -1px hsl(95, 60%, 25%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(95, 60%, 25%, 0.00), 0px 1px 2px -1px hsl(95, 60%, 25%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(95, 60%, 25%, 0.00), 0px 2px 4px -1px hsl(95, 60%, 25%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(95, 60%, 25%, 0.00), 0px 4px 6px -1px hsl(95, 60%, 25%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(95, 60%, 25%, 0.00), 0px 8px 10px -1px hsl(95, 60%, 25%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(95, 60%, 25%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(120, 15%, 10%);\n  --foreground: hsl(45, 20%, 95%);\n  --card: hsl(120, 15%, 15%);\n  --card-foreground: hsl(45, 20%, 95%);\n  --popover: hsl(120, 15%, 10%);\n  --popover-foreground: hsl(45, 20%, 95%);\n  --primary: hsl(95, 60%, 35%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(25, 65%, 45%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(120, 15%, 20%);\n  --muted-foreground: hsl(45, 15%, 60%);\n  --accent: hsl(45, 85%, 55%);\n  --accent-foreground: hsl(120, 15%, 15%);\n  --success: hsl(100, 60%, 50%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(120, 15%, 25%);\n  --input: hsl(120, 15%, 25%);\n  --ring: hsl(95, 60%, 35%);\n  --sidebar: hsl(120, 15%, 15%);\n  --sidebar-foreground: hsl(45, 20%, 95%);\n  --sidebar-primary: hsl(95, 60%, 35%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(120, 15%, 20%);\n  --sidebar-accent-foreground: hsl(95, 60%, 35%);\n  --sidebar-border: hsl(120, 15%, 25%);\n  --sidebar-ring: hsl(95, 60%, 35%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom animations and effects */\n.farm-gradient {\n  background: linear-gradient(135deg, hsl(85, 50%, 85%) 0%, hsl(100, 40%, 75%) 50%, hsl(120, 30%, 65%) 100%);\n}\n\n.quest-card:hover {\n  transform: translateY(-2px);\n  transition: transform 0.2s ease;\n}\n\n.progress-fill {\n  transition: width 0.3s ease;\n}\n\n@keyframes pulse-glow {\n  0%, 100% { \n    opacity: 1; \n    transform: scale(1);\n  }\n  50% { \n    opacity: 0.7; \n    transform: scale(1.05);\n  }\n}\n\n.pulse-glow {\n  animation: pulse-glow 2s infinite;\n}\n\n/* Mobile-first responsive utilities */\n.mobile-bottom-nav {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 50;\n}\n\n.mobile-content {\n  padding-bottom: 5rem; /* Space for bottom nav */\n}\n\n@media (min-width: 768px) {\n  .mobile-content {\n    padding-bottom: 0;\n    margin-left: 16rem; /* Space for sidebar */\n  }\n}\n","size_bytes":4365},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/navigation.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useUser } from \"@/contexts/user-context\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Home, \n  Target, \n  Trophy, \n  TrendingUp, \n  User, \n  FileText,\n  Sprout,\n  Volume2\n} from \"lucide-react\";\nimport { t, speakText, LanguageCode } from \"@/lib/i18n\";\n\nexport default function Navigation() {\n  const [location, setLocation] = useLocation();\n  const { user, language, setLanguage } = useUser();\n\n  if (!user && location !== \"/\" && location !== \"/onboarding\") {\n    return null;\n  }\n\n  const navItems = [\n    { path: \"/dashboard\", icon: Home, label: t(\"dashboard\", language as LanguageCode) },\n    { path: \"/quests\", icon: Target, label: t(\"quests\", language as LanguageCode) },\n    { path: \"/leaderboard\", icon: Trophy, label: t(\"community\", language as LanguageCode) },\n    { path: \"/market\", icon: TrendingUp, label: t(\"market\", language as LanguageCode) },\n    { path: \"/profile\", icon: User, label: t(\"profile\", language as LanguageCode) },\n  ];\n\n  const desktopNavItems = [\n    ...navItems.slice(0, 2),\n    { path: \"/schemes\", icon: FileText, label: \"Govt Schemes\" },\n    ...navItems.slice(2),\n  ];\n\n  const handleSpeak = (text: string) => {\n    speakText(text, language as LanguageCode);\n  };\n\n  return (\n    <>\n      {/* Mobile Bottom Navigation */}\n      <nav className=\"md:hidden mobile-bottom-nav bg-card border-t border-border\" data-testid=\"mobile-navigation\">\n        <div className=\"flex justify-around items-center py-2\">\n          {navItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.path;\n            return (\n              <Button\n                key={item.path}\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation(item.path)}\n                className={`flex flex-col items-center p-2 h-auto space-y-1 ${\n                  isActive ? \"text-primary\" : \"text-muted-foreground\"\n                }`}\n                data-testid={`nav-${item.path.slice(1)}`}\n              >\n                <Icon className=\"h-5 w-5\" />\n                <span className=\"text-xs\">{item.label}</span>\n              </Button>\n            );\n          })}\n        </div>\n      </nav>\n\n      {/* Desktop Sidebar */}\n      <div className=\"hidden md:block fixed left-0 top-0 h-full w-64 bg-card border-r border-border z-50\" data-testid=\"desktop-sidebar\">\n        <div className=\"p-6\">\n          <div className=\"flex items-center space-x-3 mb-8\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <Sprout className=\"text-primary-foreground h-6 w-6\" />\n            </div>\n            <div>\n              <h1 className=\"font-bold text-xl text-primary\">KrishiGrow</h1>\n              <p className=\"text-xs text-muted-foreground\">{t(\"sustainableFarming\", language as LanguageCode)}</p>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => handleSpeak(\"KrishiGrow - Sustainable Farming Platform\")}\n              className=\"ml-auto\"\n              data-testid=\"speak-title\"\n            >\n              <Volume2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          <div className=\"mb-6\">\n            <select\n              value={language}\n              onChange={(e) => setLanguage(e.target.value)}\n              className=\"w-full px-3 py-2 text-sm border border-border rounded-lg bg-background\"\n              data-testid=\"language-selector\"\n            >\n              <option value=\"en\">English</option>\n              <option value=\"hi\">हिंदी</option>\n              <option value=\"te\">తెలుగు</option>\n              <option value=\"ta\">தமிழ்</option>\n            </select>\n          </div>\n\n          <nav className=\"space-y-2\">\n            {desktopNavItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.path;\n              return (\n                <Button\n                  key={item.path}\n                  variant={isActive ? \"secondary\" : \"ghost\"}\n                  onClick={() => setLocation(item.path)}\n                  className=\"w-full justify-start\"\n                  data-testid={`nav-${item.path.slice(1)}`}\n                >\n                  <Icon className=\"mr-3 h-4 w-4\" />\n                  {item.label}\n                </Button>\n              );\n            })}\n          </nav>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":4532},"client/src/components/quest-card.tsx":{"content":"import { Quest, UserQuest } from '@shared/schema';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { CheckCircle, Circle, Coins, Star, Award, Users } from 'lucide-react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface QuestCardProps {\n  quest: Quest;\n  userQuest?: UserQuest;\n  userId: string;\n  isTeamQuest?: boolean;\n}\n\nexport default function QuestCard({ quest, userQuest, userId, isTeamQuest }: QuestCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const startQuestMutation = useMutation({\n    mutationFn: () => apiRequest('POST', '/api/user-quests', {\n      userId,\n      questId: quest.id,\n      status: 'in_progress',\n      progress: new Array(quest.steps.length).fill(false)\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user-quests', userId] });\n      toast({\n        title: \"Quest Started!\",\n        description: `You've started the \"${quest.title}\" quest.`,\n      });\n    }\n  });\n\n  const completeQuestMutation = useMutation({\n    mutationFn: () => apiRequest('POST', `/api/user-quests/${userQuest?.id}/complete`, {}),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user-quests', userId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/user-progress', userId] });\n      toast({\n        title: \"Quest Completed! 🎉\",\n        description: `You earned ${quest.coinReward} coins and ${quest.xpReward} XP!`,\n      });\n    }\n  });\n\n  const getProgressPercentage = () => {\n    if (!userQuest || !userQuest.progress) return 0;\n    const completed = userQuest.progress.filter(Boolean).length;\n    return Math.round((completed / quest.steps.length) * 100);\n  };\n\n  const getDifficultyColor = () => {\n    switch (quest.difficulty) {\n      case 'easy': return 'bg-success';\n      case 'medium': return 'bg-accent';\n      case 'high': return 'bg-secondary';\n      default: return 'bg-muted';\n    }\n  };\n\n  const getStatusBadge = () => {\n    if (!userQuest) return <Badge className=\"bg-blue-100 text-blue-800\">New</Badge>;\n    if (userQuest.status === 'completed') return <Badge className=\"bg-success text-success-foreground\">Completed</Badge>;\n    if (userQuest.status === 'in_progress') {\n      return <Badge className=\"bg-accent text-accent-foreground\">{getProgressPercentage()}% Complete</Badge>;\n    }\n    return <Badge className=\"bg-muted text-muted-foreground\">Not Started</Badge>;\n  };\n\n  const canComplete = userQuest?.status === 'in_progress' && getProgressPercentage() >= 75;\n\n  return (\n    <Card \n      className={`quest-card transition-all hover:shadow-md ${isTeamQuest ? 'border-l-4 border-l-secondary' : ''}`}\n      data-testid={`quest-card-${quest.id}`}\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"flex justify-between items-start mb-3\">\n          <div className=\"flex items-center\">\n            <div className={`w-12 h-12 ${getDifficultyColor()} rounded-lg flex items-center justify-center mr-3`}>\n              {isTeamQuest ? (\n                <Users className=\"text-white h-6 w-6\" />\n              ) : (\n                <Star className=\"text-white h-6 w-6\" />\n              )}\n            </div>\n            <div>\n              <h3 className=\"font-semibold\" data-testid={`quest-title-${quest.id}`}>{quest.title}</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {quest.category} • {quest.difficulty}\n                {isTeamQuest && \" • Team Quest\"}\n              </p>\n            </div>\n          </div>\n          {getStatusBadge()}\n        </div>\n        \n        <p className=\"text-sm text-muted-foreground mb-4\" data-testid={`quest-description-${quest.id}`}>\n          {quest.description}\n        </p>\n        \n        {userQuest?.status === 'in_progress' && (\n          <>\n            <div className=\"space-y-2 mb-4\">\n              {quest.steps.map((step, index) => {\n                const isCompleted = userQuest.progress?.[index] || false;\n                return (\n                  <div key={index} className=\"flex items-center text-sm\" data-testid={`quest-step-${index}`}>\n                    {isCompleted ? (\n                      <CheckCircle className=\"text-success mr-2 h-4 w-4\" />\n                    ) : (\n                      <Circle className=\"text-muted-foreground mr-2 h-4 w-4\" />\n                    )}\n                    <span className={isCompleted ? \"line-through text-muted-foreground\" : \"\"}>\n                      {step}\n                    </span>\n                  </div>\n                );\n              })}\n            </div>\n            \n            <Progress value={getProgressPercentage()} className=\"mb-4\" />\n          </>\n        )}\n        \n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex space-x-4 text-sm\">\n            <span className=\"flex items-center\" data-testid={`quest-coin-reward-${quest.id}`}>\n              <Coins className=\"text-accent mr-1 h-4 w-4\" />\n              {quest.coinReward} coins\n            </span>\n            <span className=\"flex items-center\" data-testid={`quest-xp-reward-${quest.id}`}>\n              <Star className=\"text-accent mr-1 h-4 w-4\" />\n              {quest.xpReward} XP\n            </span>\n            {quest.badgeReward && (\n              <span className=\"flex items-center\" data-testid={`quest-badge-reward-${quest.id}`}>\n                <Award className=\"text-secondary mr-1 h-4 w-4\" />\n                {quest.badgeReward}\n              </span>\n            )}\n          </div>\n          \n          <div>\n            {!userQuest ? (\n              <Button\n                onClick={() => startQuestMutation.mutate()}\n                disabled={startQuestMutation.isPending}\n                className=\"bg-muted text-foreground hover:bg-muted/80\"\n                data-testid={`button-start-quest-${quest.id}`}\n              >\n                Start Quest\n              </Button>\n            ) : userQuest.status === 'completed' ? (\n              <Button disabled className=\"bg-success text-success-foreground\">\n                Completed ✓\n              </Button>\n            ) : canComplete ? (\n              <Button\n                onClick={() => completeQuestMutation.mutate()}\n                disabled={completeQuestMutation.isPending}\n                className=\"bg-primary text-primary-foreground\"\n                data-testid={`button-complete-quest-${quest.id}`}\n              >\n                I Did It!\n              </Button>\n            ) : (\n              <Button disabled className=\"bg-muted text-muted-foreground\">\n                In Progress...\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6977},"client/src/components/virtual-farm.tsx":{"content":"import { Farm, UserProgress } from '@shared/schema';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Wheat, Sprout, Droplets, Recycle, Thermometer, MapPin } from 'lucide-react';\n\ninterface VirtualFarmProps {\n  farm: Farm;\n  progress: UserProgress;\n}\n\nexport default function VirtualFarm({ farm, progress }: VirtualFarmProps) {\n  const getCropIcon = (crop: string) => {\n    const lowerCrop = crop.toLowerCase();\n    if (lowerCrop.includes('wheat')) return Wheat;\n    return Sprout;\n  };\n\n  const getSustainabilityColor = (score: number) => {\n    if (score >= 80) return 'bg-success';\n    if (score >= 60) return 'bg-accent';\n    return 'bg-secondary';\n  };\n\n  return (\n    <Card className=\"overflow-hidden\" data-testid=\"virtual-farm\">\n      <CardHeader className=\"pb-2\">\n        <div className=\"flex justify-between items-center\">\n          <CardTitle className=\"text-lg\">My Virtual Farm</CardTitle>\n          <Badge className={`${getSustainabilityColor(progress.sustainabilityScore)} text-white`}>\n            Healthy\n          </Badge>\n        </div>\n      </CardHeader>\n      \n      <div className=\"farm-gradient h-48 relative\">\n        <div className=\"absolute inset-0 p-4 flex flex-col justify-between\">\n          {/* Crop fields representation */}\n          <div className=\"grid grid-cols-2 gap-2 h-24\">\n            {farm.primaryCrops.slice(0, 2).map((crop, index) => {\n              const CropIcon = getCropIcon(crop);\n              return (\n                <div\n                  key={crop}\n                  className={`bg-green-400/30 rounded-lg border-2 border-green-500/50 flex items-center justify-center ${\n                    index === 0 ? 'pulse-glow' : ''\n                  }`}\n                  data-testid={`crop-field-${index}`}\n                >\n                  <div className=\"text-center\">\n                    <CropIcon className=\"text-green-600 h-6 w-6 mx-auto\" />\n                    <p className=\"text-xs mt-1 text-green-700\">{crop}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n          \n          {/* Farm elements based on progress */}\n          <div className=\"flex justify-between items-end\">\n            <div className=\"flex space-x-2\">\n              {progress.badges.includes('Compost Master') && (\n                <div className=\"w-6 h-6 bg-secondary rounded-full flex items-center justify-center pulse-glow\" data-testid=\"compost-indicator\">\n                  <Recycle className=\"text-white h-3 w-3\" />\n                </div>\n              )}\n              {progress.badges.includes('Water Saver') && (\n                <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center\" data-testid=\"irrigation-indicator\">\n                  <Droplets className=\"text-white h-3 w-3\" />\n                </div>\n              )}\n            </div>\n            <div className=\"text-right text-xs\">\n              {progress.badges.includes('Compost Master') && (\n                <p className=\"text-green-700\">🌱 Compost Active</p>\n              )}\n              {progress.badges.includes('Water Saver') && (\n                <p className=\"text-blue-700\">💧 Drip Irrigation</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <CardContent className=\"p-4 bg-muted/50\">\n        <div className=\"flex justify-between text-sm\">\n          <div className=\"flex items-center\" data-testid=\"farm-location\">\n            <MapPin className=\"h-4 w-4 text-muted-foreground mr-1\" />\n            <span>{farm.village}, {farm.district}, {farm.state}</span>\n          </div>\n          <div className=\"flex items-center\" data-testid=\"weather-info\">\n            <Thermometer className=\"h-4 w-4 text-orange-500 mr-1\" />\n            <span>28°C</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3936},"client/src/contexts/user-context.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User, Farm, UserProgress } from '@shared/schema';\n\ninterface UserContextType {\n  user: User | null;\n  farm: Farm | null;\n  progress: UserProgress | null;\n  language: string;\n  setUser: (user: User | null) => void;\n  setFarm: (farm: Farm | null) => void;\n  setProgress: (progress: UserProgress | null) => void;\n  setLanguage: (language: string) => void;\n  logout: () => void;\n}\n\nconst UserContext = createContext<UserContextType | undefined>(undefined);\n\nexport function UserProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [farm, setFarm] = useState<Farm | null>(null);\n  const [progress, setProgress] = useState<UserProgress | null>(null);\n  const [language, setLanguage] = useState('hi');\n\n  // Load user data from localStorage on mount\n  useEffect(() => {\n    const savedUser = localStorage.getItem('krishigrow_user');\n    const savedFarm = localStorage.getItem('krishigrow_farm');\n    const savedProgress = localStorage.getItem('krishigrow_progress');\n    const savedLanguage = localStorage.getItem('krishigrow_language');\n\n    if (savedUser) setUser(JSON.parse(savedUser));\n    if (savedFarm) setFarm(JSON.parse(savedFarm));\n    if (savedProgress) setProgress(JSON.parse(savedProgress));\n    if (savedLanguage) setLanguage(savedLanguage);\n  }, []);\n\n  // Save user data to localStorage when it changes\n  useEffect(() => {\n    if (user) {\n      localStorage.setItem('krishigrow_user', JSON.stringify(user));\n    } else {\n      localStorage.removeItem('krishigrow_user');\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (farm) {\n      localStorage.setItem('krishigrow_farm', JSON.stringify(farm));\n    } else {\n      localStorage.removeItem('krishigrow_farm');\n    }\n  }, [farm]);\n\n  useEffect(() => {\n    if (progress) {\n      localStorage.setItem('krishigrow_progress', JSON.stringify(progress));\n    } else {\n      localStorage.removeItem('krishigrow_progress');\n    }\n  }, [progress]);\n\n  useEffect(() => {\n    localStorage.setItem('krishigrow_language', language);\n  }, [language]);\n\n  const logout = () => {\n    setUser(null);\n    setFarm(null);\n    setProgress(null);\n    localStorage.clear();\n  };\n\n  return (\n    <UserContext.Provider\n      value={{\n        user,\n        farm,\n        progress,\n        language,\n        setUser,\n        setFarm,\n        setProgress,\n        setLanguage,\n        logout,\n      }}\n    >\n      {children}\n    </UserContext.Provider>\n  );\n}\n\nexport function useUser() {\n  const context = useContext(UserContext);\n  if (context === undefined) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n}\n","size_bytes":2735},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/i18n.ts":{"content":"export const translations = {\n  en: {\n    welcome: \"Welcome to KrishiGrow\",\n    getStarted: \"Get Started\",\n    alreadyHaveAccount: \"I Already Have Account\",\n    dashboard: \"Dashboard\",\n    quests: \"Quests\",\n    community: \"Community\",\n    market: \"Market\",\n    profile: \"Profile\",\n    sustainableFarming: \"Sustainable Farming\",\n    virtualFarm: \"My Virtual Farm\",\n    todaysQuests: \"Today's Quests\",\n    viewAll: \"View All\",\n    completeQuest: \"I Did It!\",\n    level: \"Level\",\n    coins: \"Coins\",\n    sustainability: \"Sustainability\",\n    healthy: \"Healthy\",\n    weatherAlert: \"Weather Alert\",\n    quickTip: \"Quick Tip\",\n  },\n  hi: {\n    welcome: \"कृषिग्रो में आपका स्वागत है\",\n    getStarted: \"शुरू करें\",\n    alreadyHaveAccount: \"मेरा खाता पहले से है\",\n    dashboard: \"डैशबोर्ड\",\n    quests: \"कार्य\",\n    community: \"समुदाय\",\n    market: \"बाज़ार\",\n    profile: \"प्रोफ़ाइल\",\n    sustainableFarming: \"टिकाऊ खेती\",\n    virtualFarm: \"मेरा वर्चुअल फार्म\",\n    todaysQuests: \"आज के कार्य\",\n    viewAll: \"सभी देखें\",\n    completeQuest: \"मैंने किया!\",\n    level: \"स्तर\",\n    coins: \"सिक्के\",\n    sustainability: \"स्थिरता\",\n    healthy: \"स्वस्थ\",\n    weatherAlert: \"मौसम चेतावनी\",\n    quickTip: \"त्वरित सुझाव\",\n  },\n  te: {\n    welcome: \"కృషిగ్రోకి స్వాగతం\",\n    getStarted: \"ప్రారంభించండి\",\n    alreadyHaveAccount: \"నాకు అకౌంట్ ఉంది\",\n    dashboard: \"డాష్‌బోర్డ్\",\n    quests: \"పనులు\",\n    community: \"సమాజం\",\n    market: \"మార్కెట్\",\n    profile: \"ప్రొఫైల్\",\n    sustainableFarming: \"సస్టైనబుల్ ఫార్మింగ్\",\n    virtualFarm: \"నా వర్చువల్ ఫారం\",\n    todaysQuests: \"నేటి పనులు\",\n    viewAll: \"అన్నీ చూడండి\",\n    completeQuest: \"నేను చేశాను!\",\n    level: \"లెవల్\",\n    coins: \"నాణేలు\",\n    sustainability: \"స్థిరత్వం\",\n    healthy: \"ఆరోగ్యకరమైన\",\n    weatherAlert: \"వాతావరణ హెచ్చరిక\",\n    quickTip: \"త్వరిత చిట్కా\",\n  },\n  ta: {\n    welcome: \"கிருஷிக்ரோவுக்கு வரவேற்கிறோம்\",\n    getStarted: \"தொடங்குங்கள்\",\n    alreadyHaveAccount: \"எனக்கு கணக்கு உள்ளது\",\n    dashboard: \"டாஷ்போர்டு\",\n    quests: \"பணிகள்\",\n    community: \"சமூகம்\",\n    market: \"சந்தை\",\n    profile: \"சுயவிவரம்\",\n    sustainableFarming: \"நிலையான விவசாயம்\",\n    virtualFarm: \"என் மெய்நிகர் பண்ணை\",\n    todaysQuests: \"இன்றைய பணிகள்\",\n    viewAll: \"அனைத்தும் பார்க்க\",\n    completeQuest: \"நான் செய்தேன்!\",\n    level: \"நிலை\",\n    coins: \"நாணயங்கள்\",\n    sustainability: \"நிலைத்தன்மை\",\n    healthy: \"ஆரோக்கியமான\",\n    weatherAlert: \"வானிலை எச்சரிக்கை\",\n    quickTip: \"விரைவான குறிப்பு\",\n  }\n};\n\nexport type LanguageCode = keyof typeof translations;\n\nexport function t(key: string, language: LanguageCode = 'hi'): string {\n  const keys = key.split('.');\n  let value: any = translations[language];\n  \n  for (const k of keys) {\n    value = value?.[k];\n  }\n  \n  return value || key;\n}\n\nexport function speakText(text: string, language: LanguageCode = 'hi') {\n  if ('speechSynthesis' in window) {\n    const utterance = new SpeechSynthesisUtterance(text);\n    \n    switch (language) {\n      case 'hi':\n        utterance.lang = 'hi-IN';\n        break;\n      case 'te':\n        utterance.lang = 'te-IN';\n        break;\n      case 'ta':\n        utterance.lang = 'ta-IN';\n        break;\n      default:\n        utterance.lang = 'en-IN';\n    }\n    \n    speechSynthesis.speak(utterance);\n  }\n}\n","size_bytes":4452},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useUser } from \"@/contexts/user-context\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport VirtualFarm from \"@/components/virtual-farm\";\nimport { Coins, Star, Sprout, Bell, CloudSun, Lightbulb, Target } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { t, LanguageCode } from \"@/lib/i18n\";\n\nexport default function Dashboard() {\n  const { user, farm, progress, language } = useUser();\n  const [, setLocation] = useLocation();\n\n  const { data: userQuests } = useQuery({\n    queryKey: ['/api/user-quests', user?.id],\n    enabled: !!user?.id,\n  });\n\n  const { data: quests } = useQuery({\n    queryKey: ['/api/quests'],\n  });\n\n  if (!user || !farm || !progress) {\n    return (\n      <div className=\"min-h-screen mobile-content flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-muted-foreground\">Please complete your profile setup</p>\n          <Button onClick={() => setLocation(\"/onboarding\")} className=\"mt-4\">\n            Complete Setup\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const getGreeting = () => {\n    const hour = new Date().getHours();\n    if (hour < 12) return language === 'hi' ? 'सुप्रभात' : 'Good morning';\n    if (hour < 17) return language === 'hi' ? 'नमस्कार' : 'Good afternoon';\n    return language === 'hi' ? 'शुभ संध्या' : 'Good evening';\n  };\n\n  const getActiveQuests = () => {\n    if (!userQuests || !quests || !Array.isArray(userQuests) || !Array.isArray(quests)) return [];\n    const activeUserQuests = userQuests.filter((uq: any) => uq.status === 'in_progress');\n    return activeUserQuests.map((uq: any) => {\n      const quest = quests.find((q: any) => q.id === uq.questId);\n      return { userQuest: uq, quest };\n    }).filter((item: any) => item.quest);\n  };\n\n  const activeQuests = getActiveQuests();\n\n  return (\n    <div className=\"min-h-screen mobile-content\" data-testid=\"dashboard-screen\">\n      {/* Header with Profile */}\n      <div className=\"bg-primary text-primary-foreground p-4\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-accent rounded-full flex items-center justify-center\" data-testid=\"user-avatar\">\n              <span className=\"font-bold text-accent-foreground\">\n                {user.name.split(' ').map(n => n[0]).join('').slice(0, 2).toUpperCase()}\n              </span>\n            </div>\n            <div>\n              <p className=\"text-sm opacity-90\" data-testid=\"greeting\">\n                {getGreeting()},\n              </p>\n              <p className=\"font-semibold\" data-testid=\"user-name\">{user.name}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"relative text-primary-foreground hover:bg-primary-foreground/10\">\n              <Bell className=\"h-5 w-5\" />\n              <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-accent rounded-full\"></span>\n            </Button>\n          </div>\n        </div>\n        \n        {/* Farmer Stats */}\n        <div className=\"grid grid-cols-3 gap-3\">\n          <div className=\"bg-primary-foreground/10 rounded-lg p-3 text-center\" data-testid=\"coins-stat\">\n            <Coins className=\"text-accent mx-auto mb-1 h-5 w-5\" />\n            <p className=\"text-2xl font-bold\">{progress.totalCoins.toLocaleString()}</p>\n            <p className=\"text-xs opacity-90\">{t(\"coins\", language as LanguageCode)}</p>\n          </div>\n          <div className=\"bg-primary-foreground/10 rounded-lg p-3 text-center\" data-testid=\"level-stat\">\n            <Star className=\"text-accent mx-auto mb-1 h-5 w-5\" />\n            <p className=\"text-2xl font-bold\">{t(\"level\", language as LanguageCode)} {progress.level}</p>\n            <p className=\"text-xs opacity-90\">Eco Farmer</p>\n          </div>\n          <div className=\"bg-primary-foreground/10 rounded-lg p-3 text-center\" data-testid=\"sustainability-stat\">\n            <Sprout className=\"text-success mx-auto mb-1 h-5 w-5\" />\n            <p className=\"text-2xl font-bold\">{progress.sustainabilityScore}%</p>\n            <p className=\"text-xs opacity-90\">{t(\"sustainability\", language as LanguageCode)}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Virtual Farm */}\n        <VirtualFarm farm={farm} progress={progress} />\n\n        {/* Active Quests Preview */}\n        <Card data-testid=\"active-quests-card\">\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex justify-between items-center\">\n              <CardTitle className=\"text-lg\">{t(\"todaysQuests\", language as LanguageCode)}</CardTitle>\n              <Button\n                variant=\"ghost\"\n                onClick={() => setLocation(\"/quests\")}\n                className=\"text-primary text-sm font-medium\"\n                data-testid=\"button-view-all-quests\"\n              >\n                {t(\"viewAll\", language as LanguageCode)}\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {activeQuests.length > 0 ? (\n              activeQuests.slice(0, 2).map(({ userQuest, quest }: any, index: number) => {\n                const progressPercentage = userQuest.progress ? \n                  Math.round((userQuest.progress.filter(Boolean).length / quest.steps.length) * 100) : 0;\n                \n                return (\n                  <div key={userQuest.id} className=\"flex items-center p-3 bg-muted/50 rounded-lg\" data-testid={`active-quest-${index}`}>\n                    <div className=\"w-10 h-10 bg-accent rounded-lg flex items-center justify-center mr-3\">\n                      <Target className=\"text-accent-foreground h-5 w-5\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\">{quest.title}</p>\n                      <p className=\"text-sm text-muted-foreground\">Reward: {quest.coinReward} coins, +{quest.xpReward} XP</p>\n                    </div>\n                    <div className=\"w-16 h-2 bg-border rounded-full\">\n                      <div \n                        className=\"h-2 bg-success rounded-full transition-all duration-300\" \n                        style={{ width: `${progressPercentage}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                );\n              })\n            ) : (\n              <div className=\"text-center p-6\">\n                <Target className=\"mx-auto h-12 w-12 text-muted-foreground mb-3\" />\n                <p className=\"text-muted-foreground mb-3\">No active quests</p>\n                <Button onClick={() => setLocation(\"/quests\")} data-testid=\"button-start-quests\">\n                  Start Your First Quest\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Weather & Recommendations */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Card data-testid=\"weather-alert-card\">\n            <CardContent className=\"p-4\">\n              <h4 className=\"font-semibold mb-3 flex items-center\">\n                <CloudSun className=\"text-orange-500 mr-2 h-5 w-5\" />\n                {t(\"weatherAlert\", language as LanguageCode)}\n              </h4>\n              <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-3\">\n                <p className=\"text-sm text-orange-800\">\n                  🌧️ Light rain expected in 2 days. Perfect for post-harvest activities!\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card data-testid=\"quick-tip-card\">\n            <CardContent className=\"p-4\">\n              <h4 className=\"font-semibold mb-3 flex items-center\">\n                <Lightbulb className=\"text-accent mr-2 h-5 w-5\" />\n                {t(\"quickTip\", language as LanguageCode)}\n              </h4>\n              <div className=\"bg-accent/10 border border-accent/20 rounded-lg p-3\">\n                <p className=\"text-sm text-accent-foreground\">\n                  Apply neem oil spray in the evening for better pest control effectiveness.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8600},"client/src/pages/leaderboard.tsx":{"content":"import { useUser } from \"@/contexts/user-context\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trophy, Users, Star, Award } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function Leaderboard() {\n  const { user, farm } = useUser();\n  const [selectedScope, setSelectedScope] = useState(\"panchayat\");\n\n  const { data: leaderboard, isLoading } = useQuery({\n    queryKey: ['/api/leaderboard', selectedScope === \"panchayat\" ? farm?.gramPanchayat : farm?.district],\n  });\n\n  if (!user || !farm) {\n    return (\n      <div className=\"min-h-screen mobile-content flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Please complete your profile setup</p>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen mobile-content flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Loading leaderboard...</p>\n      </div>\n    );\n  }\n\n  const scopes = [\n    { id: \"panchayat\", label: \"My Panchayat\" },\n    { id: \"district\", label: \"District\" },\n    { id: \"state\", label: \"State\" },\n  ];\n\n  const topThree = Array.isArray(leaderboard) ? leaderboard.slice(0, 3) : [];\n  const remaining = Array.isArray(leaderboard) ? leaderboard.slice(3) : [];\n\n  const getPodiumHeight = (position: number) => {\n    switch (position) {\n      case 0: return \"h-24\"; // 1st place\n      case 1: return \"h-20\"; // 2nd place  \n      case 2: return \"h-20\"; // 3rd place\n      default: return \"h-16\";\n    }\n  };\n\n  const getPodiumColor = (position: number) => {\n    switch (position) {\n      case 0: return \"bg-accent border-accent\";\n      case 1: return \"bg-gray-100 border-gray-400\";\n      case 2: return \"bg-orange-100 border-orange-400\";\n      default: return \"bg-muted\";\n    }\n  };\n\n  const getPositionBadgeColor = (position: number) => {\n    switch (position) {\n      case 0: return \"bg-accent text-accent-foreground\";\n      case 1: return \"bg-gray-400 text-white\";\n      case 2: return \"bg-orange-400 text-white\";\n      default: return \"bg-muted\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen mobile-content\" data-testid=\"leaderboard-screen\">\n      <div className=\"bg-primary text-primary-foreground p-4\">\n        <h1 className=\"text-xl font-bold flex items-center\">\n          <Trophy className=\"mr-3 h-6 w-6\" />\n          Community Leaderboard\n        </h1>\n        <p className=\"text-sm opacity-90 mt-1\" data-testid=\"location-info\">\n          {farm.district} District • {farm.state}\n        </p>\n      </div>\n\n      <div className=\"p-4 space-y-4\">\n        {/* Leaderboard Scope Tabs */}\n        <div className=\"flex space-x-3 overflow-x-auto pb-2\">\n          {scopes.map((scope) => (\n            <Button\n              key={scope.id}\n              variant={selectedScope === scope.id ? \"default\" : \"secondary\"}\n              onClick={() => setSelectedScope(scope.id)}\n              className=\"whitespace-nowrap\"\n              data-testid={`scope-${scope.id}`}\n            >\n              {scope.label}\n            </Button>\n          ))}\n        </div>\n\n        {/* Top 3 Winners Podium */}\n        {topThree.length > 0 && (\n          <Card data-testid=\"top-three-podium\">\n            <CardHeader>\n              <CardTitle className=\"text-center\">🏆 This Month's Champions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex justify-center items-end space-x-4 mb-6\">\n                {topThree.map((entry: any, index: number) => {\n                  const isCurrentUser = entry.user.id === user.id;\n                  const initials = entry.user.name.split(' ').map((n: string) => n[0]).join('').slice(0, 2).toUpperCase();\n                  \n                  return (\n                    <div key={entry.user.id} className=\"text-center\" data-testid={`podium-position-${index + 1}`}>\n                      <div className={`w-16 h-16 ${getPodiumColor(index).split(' ')[0].replace('bg-', 'bg-')} rounded-full flex items-center justify-center mb-2 mx-auto ${isCurrentUser ? 'animate-pulse-glow' : ''}`}>\n                        <span className=\"font-bold text-white\">{initials}</span>\n                      </div>\n                      <div className={`${getPodiumColor(index)} rounded-lg p-3 ${getPodiumHeight(index)} flex flex-col justify-center border-2`}>\n                        <p className={`font-semibold text-sm ${index === 0 ? 'text-accent-foreground' : 'text-gray-700'}`}>\n                          {entry.user.name}\n                          {isCurrentUser && \" (You)\"}\n                        </p>\n                        <p className={`text-xs ${index === 0 ? 'text-accent font-medium' : 'text-muted-foreground'}`}>\n                          {entry.progress.sustainabilityScore} pts\n                        </p>\n                        <div className={`w-6 h-6 ${getPositionBadgeColor(index)} rounded-full flex items-center justify-center text-xs font-bold mx-auto mt-1`}>\n                          {index + 1}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Full Leaderboard */}\n        <Card data-testid=\"full-leaderboard\">\n          <CardHeader>\n            <CardTitle>Sustainability Rankings</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"divide-y divide-border\">\n              {Array.isArray(leaderboard) && leaderboard.map((entry: any, index: number) => {\n                const isCurrentUser = entry.user.id === user.id;\n                const initials = entry.user.name.split(' ').map((n: string) => n[0]).join('').slice(0, 2).toUpperCase();\n                const position = index + 1;\n                \n                return (\n                  <div \n                    key={entry.user.id} \n                    className={`p-4 flex items-center justify-between ${isCurrentUser ? 'bg-accent/5' : ''}`}\n                    data-testid={`leaderboard-entry-${position}`}\n                  >\n                    <div className=\"flex items-center\">\n                      <span className={`w-8 h-8 ${getPositionBadgeColor(index)} rounded-full flex items-center justify-center text-sm font-bold mr-3`}>\n                        {position}\n                      </span>\n                      <div className=\"flex items-center\">\n                        <div className={`w-10 h-10 ${index < 3 ? getPodiumColor(index).split(' ')[0] : 'bg-muted'} rounded-full flex items-center justify-center mr-3`}>\n                          <span className=\"font-semibold text-foreground\">{initials}</span>\n                        </div>\n                        <div>\n                          <p className=\"font-semibold\">\n                            {entry.user.name}\n                            {isCurrentUser && \" (You)\"}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {farm.village} Village\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-bold text-lg\" data-testid={`score-${position}`}>\n                        {entry.progress.sustainabilityScore}\n                      </p>\n                      <div className=\"flex space-x-1\">\n                        {entry.progress.badges.length > 0 && (\n                          <Badge className=\"text-xs bg-success text-success-foreground\">\n                            🌱 {entry.progress.badges[0]}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                );\n              }) || []}\n              \n              {(!Array.isArray(leaderboard) || leaderboard.length === 0) && (\n                <div className=\"p-8 text-center\">\n                  <Trophy className=\"mx-auto h-12 w-12 text-muted-foreground mb-3\" />\n                  <p className=\"text-muted-foreground\">No leaderboard data available yet</p>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Complete quests to appear on the leaderboard\n                  </p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Community Feed */}\n        <Card data-testid=\"community-feed\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Users className=\"mr-3 h-5 w-5\" />\n              Community Achievements\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start space-x-3 p-3 bg-muted/30 rounded-lg\">\n                <div className=\"w-10 h-10 bg-success rounded-full flex items-center justify-center\">\n                  <span className=\"font-semibold text-success-foreground text-sm\">AS</span>\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm\">\n                    <span className=\"font-semibold\">Arjun Sharma</span> completed the \n                    <span className=\"text-primary font-medium\"> \"Organic Pest Control\"</span> quest!\n                  </p>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <span className=\"text-xs text-muted-foreground\">2 hours ago</span>\n                    <Badge className=\"text-xs bg-success/10 text-success\">+150 coins</Badge>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-3 p-3 bg-muted/30 rounded-lg\">\n                <div className=\"w-10 h-10 bg-accent rounded-full flex items-center justify-center\">\n                  <span className=\"font-semibold text-accent-foreground text-sm\">SK</span>\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm\">\n                    <span className=\"font-semibold\">Sunita Kumari</span> earned the \n                    <span className=\"text-secondary font-medium\"> \"Water Conservation Champion\"</span> badge!\n                  </p>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <span className=\"text-xs text-muted-foreground\">5 hours ago</span>\n                    <Badge className=\"text-xs bg-accent/10 text-accent\">🏆 Badge</Badge>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10898},"client/src/pages/market.tsx":{"content":"import { useUser } from \"@/contexts/user-context\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { TrendingUp, TrendingDown, Minus, ArrowUp, ArrowDown, Bot, ThumbsUp, Lightbulb, Bell } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function Market() {\n  const { user, farm } = useUser();\n  const [selectedMandi, setSelectedMandi] = useState(\"wardha\");\n\n  const { data: marketPrices, isLoading } = useQuery({\n    queryKey: ['/api/market-prices', farm?.district],\n  });\n\n  if (!user || !farm) {\n    return (\n      <div className=\"min-h-screen mobile-content flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Please complete your profile setup</p>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen mobile-content flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Loading market data...</p>\n      </div>\n    );\n  }\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case \"up\": return <ArrowUp className=\"text-success h-3 w-3\" />;\n      case \"down\": return <ArrowDown className=\"text-destructive h-3 w-3\" />;\n      default: return <Minus className=\"text-muted-foreground h-3 w-3\" />;\n    }\n  };\n\n  const getTrendColor = (trend: string) => {\n    switch (trend) {\n      case \"up\": return \"text-success\";\n      case \"down\": return \"text-destructive\";\n      default: return \"text-muted-foreground\";\n    }\n  };\n\n  const getTrendPercentage = () => {\n    // Mock percentage for demo\n    return (Math.random() * 10 - 5).toFixed(1);\n  };\n\n  return (\n    <div className=\"min-h-screen mobile-content\" data-testid=\"market-screen\">\n      <div className=\"bg-primary text-primary-foreground p-4\">\n        <h1 className=\"text-xl font-bold flex items-center\">\n          <TrendingUp className=\"mr-3 h-6 w-6\" />\n          Market Oracle\n        </h1>\n        <p className=\"text-sm opacity-90 mt-1\">Real-time prices & AI recommendations</p>\n      </div>\n\n      <div className=\"p-4 space-y-4\">\n        {/* Market Overview */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n          {Array.isArray(marketPrices) && marketPrices.slice(0, 4).map((price: any, index: number) => {\n            const trendPercentage = getTrendPercentage();\n            return (\n              <Card key={price.id} className=\"text-center\" data-testid={`price-card-${index}`}>\n                <CardContent className=\"p-3\">\n                  <TrendingUp className=\"text-accent mx-auto mb-2 h-6 w-6\" />\n                  <p className=\"text-xl font-bold\" data-testid={`price-${price.crop.toLowerCase()}`}>\n                    ₹{price.price.toLocaleString()}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">{price.crop}/{price.unit}</p>\n                  <div className=\"flex items-center justify-center mt-1\">\n                    {getTrendIcon(price.trend)}\n                    <span className={`text-xs ml-1 ${getTrendColor(price.trend)}`}>\n                      {parseFloat(trendPercentage) > 0 ? '+' : ''}{trendPercentage}%\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          }) || []}\n        </div>\n\n        {/* AI Recommendations */}\n        <Card data-testid=\"ai-recommendations\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Bot className=\"text-primary mr-2 h-6 w-6\" />\n              AI Crop Recommendations\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"bg-gradient-to-r from-success/10 to-success/5 border border-success/20 rounded-lg p-4\">\n              <div className=\"flex justify-between items-start mb-3\">\n                <div>\n                  <h4 className=\"font-semibold text-success flex items-center\">\n                    <ThumbsUp className=\"mr-2 h-5 w-5\" />\n                    High Profit Opportunity\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground\">Next Season Recommendation</p>\n                </div>\n                <Badge className=\"bg-success text-success-foreground\">+35% Profit</Badge>\n              </div>\n              \n              <p className=\"text-sm mb-3\">\n                <span className=\"font-medium\">Tomato cultivation</span> is predicted to be highly profitable in your region. \n                Market demand is expected to increase by 40% in the next 3 months.\n              </p>\n              \n              <div className=\"grid grid-cols-2 gap-4 text-sm mb-4\">\n                <div>\n                  <p className=\"text-muted-foreground\">Expected Yield</p>\n                  <p className=\"font-semibold\">25-30 tons/acre</p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Market Price</p>\n                  <p className=\"font-semibold\">₹15-18/kg</p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Investment</p>\n                  <p className=\"font-semibold\">₹45,000/acre</p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Profit Margin</p>\n                  <p className=\"font-semibold text-success\">35-40%</p>\n                </div>\n              </div>\n              \n              <Button \n                className=\"bg-success text-success-foreground hover:bg-success/90\"\n                data-testid=\"button-accept-challenge\"\n              >\n                Accept Challenge (150 XP)\n              </Button>\n            </div>\n            \n            <div className=\"bg-gradient-to-r from-accent/10 to-accent/5 border border-accent/20 rounded-lg p-4\">\n              <div className=\"flex justify-between items-start mb-3\">\n                <div>\n                  <h4 className=\"font-semibold text-accent flex items-center\">\n                    <Lightbulb className=\"mr-2 h-5 w-5\" />\n                    Smart Diversification\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground\">Risk Management Strategy</p>\n                </div>\n                <Badge className=\"bg-accent text-accent-foreground\">Balanced Risk</Badge>\n              </div>\n              \n              <p className=\"text-sm mb-3\">\n                Consider growing <span className=\"font-medium\">Green Gram</span> alongside your main crop. \n                It fixes nitrogen, reduces soil preparation costs, and provides steady income.\n              </p>\n              \n              <Button \n                className=\"bg-accent text-accent-foreground hover:bg-accent/90\"\n                data-testid=\"button-learn-more\"\n              >\n                Learn More (25 XP)\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Local Mandi Prices */}\n        <Card data-testid=\"mandi-prices\">\n          <CardHeader>\n            <div className=\"flex justify-between items-center\">\n              <CardTitle>Local Mandi Prices</CardTitle>\n              <Select value={selectedMandi} onValueChange={setSelectedMandi}>\n                <SelectTrigger className=\"w-36\" data-testid=\"mandi-selector\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"wardha\">Wardha Mandi</SelectItem>\n                  <SelectItem value=\"nagpur\">Nagpur Mandi</SelectItem>\n                  <SelectItem value=\"akola\">Akola Mandi</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"divide-y divide-border\">\n              {Array.isArray(marketPrices) && marketPrices.map((price: any, index: number) => (\n                <div key={price.id} className=\"p-4 flex justify-between items-center\" data-testid={`mandi-price-${index}`}>\n                  <div className=\"flex items-center\">\n                    <TrendingUp className=\"text-success mr-3 h-5 w-5\" />\n                    <div>\n                      <p className=\"font-semibold\">{price.crop}</p>\n                      <p className=\"text-sm text-muted-foreground\">{price.variety || 'Standard quality'}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-lg font-bold\">₹{price.price.toLocaleString()}</p>\n                    <p className=\"text-sm text-muted-foreground\">/{price.unit}</p>\n                  </div>\n                </div>\n              )) || []}\n              \n              {(!Array.isArray(marketPrices) || marketPrices.length === 0) && (\n                <div className=\"p-8 text-center\">\n                  <TrendingUp className=\"mx-auto h-12 w-12 text-muted-foreground mb-3\" />\n                  <p className=\"text-muted-foreground\">No market data available</p>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Market prices will be updated soon\n                  </p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Price Alerts */}\n        <Card data-testid=\"price-alerts\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Bell className=\"text-accent mr-2 h-5 w-5\" />\n              Price Alerts\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between p-3 bg-success/5 border border-success/20 rounded-lg\">\n                <div>\n                  <p className=\"font-semibold text-success\">Wheat Target Reached!</p>\n                  <p className=\"text-sm text-muted-foreground\">₹2,350/quintal - Your target price</p>\n                </div>\n                <Button \n                  className=\"bg-success text-success-foreground\"\n                  data-testid=\"button-sell-now\"\n                >\n                  Sell Now\n                </Button>\n              </div>\n              \n              <div className=\"p-3 bg-muted/50 rounded-lg\">\n                <p className=\"font-semibold mb-3\">Set New Alert</p>\n                <div className=\"flex items-center space-x-2\">\n                  <Select>\n                    <SelectTrigger className=\"flex-1\" data-testid=\"select-crop-alert\">\n                      <SelectValue placeholder=\"Select Crop\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"maize\">Maize</SelectItem>\n                      <SelectItem value=\"cotton\">Cotton</SelectItem>\n                      <SelectItem value=\"soybean\">Soybean</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Input \n                    type=\"number\" \n                    placeholder=\"Target price\" \n                    className=\"w-28\"\n                    data-testid=\"input-target-price\"\n                  />\n                  <Button \n                    className=\"bg-primary text-primary-foreground\"\n                    data-testid=\"button-set-alert\"\n                  >\n                    Set Alert\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11777},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/onboarding.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useUser } from \"@/contexts/user-context\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ArrowLeft, UserCircle, MapPin, Sprout, Droplets, FileText } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema, insertFarmSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Form schemas for each step\nconst personalDetailsSchema = insertUserSchema;\nconst farmLocationSchema = z.object({\n  state: z.string().min(1, \"State is required\"),\n  district: z.string().min(1, \"District is required\"),\n  taluk: z.string().min(1, \"Taluk is required\"),\n  gramPanchayat: z.string().min(1, \"Gram Panchayat is required\"),\n  village: z.string().min(1, \"Village is required\"),\n  farmSize: z.string().min(1, \"Farm size is required\"),\n});\nconst soilTypeSchema = z.object({\n  soilType: z.string().min(1, \"Soil type is required\"),\n});\nconst cropsSchema = z.object({\n  primaryCrops: z.array(z.string()).min(1, \"Select at least one crop\"),\n});\nconst waterSourceSchema = z.object({\n  waterSource: z.string().min(1, \"Water source is required\"),\n});\n\nexport default function Onboarding() {\n  const [, setLocation] = useLocation();\n  const { setUser, setFarm, language } = useUser();\n  const { toast } = useToast();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [formData, setFormData] = useState<any>({});\n\n  const createUserMutation = useMutation({\n    mutationFn: (userData: any) => apiRequest('POST', '/api/users', userData),\n    onSuccess: async (response) => {\n      const user = await response.json();\n      setUser(user);\n      \n      // Create farm after user is created\n      const farmData = {\n        userId: user.id,\n        ...formData.location,\n        ...formData.soil,\n        ...formData.crops,\n        ...formData.water,\n      };\n      \n      const farmResponse = await apiRequest('POST', '/api/farms', farmData);\n      const farm = await farmResponse.json();\n      setFarm(farm);\n      \n      toast({\n        title: \"Welcome to KrishiGrow! 🌱\",\n        description: \"Your profile has been created successfully.\",\n      });\n      \n      setLocation(\"/dashboard\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create your profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const steps = [\n    { title: \"Personal Details\", icon: UserCircle, component: PersonalDetailsStep },\n    { title: \"Farm Location\", icon: MapPin, component: FarmLocationStep },\n    { title: \"Soil Type\", icon: FileText, component: SoilTypeStep },\n    { title: \"Crops\", icon: Sprout, component: CropsStep },\n    { title: \"Water Source\", icon: Droplets, component: WaterSourceStep },\n  ];\n\n  const progress = (currentStep / steps.length) * 100;\n\n  const handleNext = (stepData: any) => {\n    const newFormData = { ...formData, [`step${currentStep}`]: stepData };\n    setFormData(newFormData);\n\n    if (currentStep === steps.length) {\n      // Submit the complete form\n      const userData = {\n        ...newFormData.step1,\n        language,\n      };\n      \n      const completeFormData = {\n        personal: newFormData.step1,\n        location: newFormData.step2,\n        soil: newFormData.step3,\n        crops: newFormData.step4,\n        water: newFormData.step5,\n      };\n      \n      setFormData(completeFormData);\n      createUserMutation.mutate(userData);\n    } else {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    } else {\n      setLocation(\"/\");\n    }\n  };\n\n  const CurrentStepComponent = steps[currentStep - 1].component;\n  const StepIcon = steps[currentStep - 1].icon;\n\n  return (\n    <div className=\"min-h-screen mobile-content\" data-testid=\"onboarding-screen\">\n      <div className=\"bg-primary text-primary-foreground p-4 flex items-center\">\n        <Button\n          variant=\"ghost\"\n          onClick={handleBack}\n          className=\"mr-3 text-primary-foreground hover:bg-primary-foreground/10\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-xl font-bold\" data-testid=\"onboarding-title\">Setup Your Farm Profile</h1>\n      </div>\n      \n      <div className=\"p-6 space-y-6\">\n        {/* Progress Bar */}\n        <div className=\"mb-6\">\n          <div className=\"flex justify-between text-sm text-muted-foreground mb-2\">\n            <span data-testid=\"step-indicator\">Step {currentStep} of {steps.length}</span>\n            <span data-testid=\"progress-percentage\">{Math.round(progress)}%</span>\n          </div>\n          <Progress value={progress} className=\"h-2\" data-testid=\"progress-bar\" />\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <StepIcon className=\"text-primary mr-3 h-6 w-6\" />\n              {steps[currentStep - 1].title}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <CurrentStepComponent\n              onNext={handleNext}\n              initialData={formData[`step${currentStep}`]}\n              isLoading={createUserMutation.isPending}\n            />\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\n// Step Components\nfunction PersonalDetailsStep({ onNext, initialData, isLoading }: any) {\n  const form = useForm({\n    resolver: zodResolver(personalDetailsSchema),\n    defaultValues: initialData || {\n      name: \"\",\n      mobileNumber: \"\",\n      ageGroup: \"\",\n    },\n  });\n\n  return (\n    <form onSubmit={form.handleSubmit(onNext)} className=\"space-y-4\" data-testid=\"personal-details-form\">\n      <div>\n        <Label htmlFor=\"name\">Farmer Name</Label>\n        <Input\n          id=\"name\"\n          placeholder=\"Enter your full name\"\n          {...form.register(\"name\")}\n          data-testid=\"input-name\"\n        />\n        {form.formState.errors.name && (\n          <p className=\"text-destructive text-sm mt-1\">{String(form.formState.errors.name.message)}</p>\n        )}\n      </div>\n      \n      <div>\n        <Label htmlFor=\"mobile\">Mobile Number</Label>\n        <Input\n          id=\"mobile\"\n          type=\"tel\"\n          placeholder=\"+91 XXXXX XXXXX\"\n          {...form.register(\"mobileNumber\")}\n          data-testid=\"input-mobile\"\n        />\n        {form.formState.errors.mobileNumber && (\n          <p className=\"text-destructive text-sm mt-1\">{String(form.formState.errors.mobileNumber.message)}</p>\n        )}\n      </div>\n\n      <div>\n        <Label htmlFor=\"age\">Age Group</Label>\n        <Select onValueChange={(value) => form.setValue(\"ageGroup\", value)} defaultValue={form.getValues(\"ageGroup\")}>\n          <SelectTrigger data-testid=\"select-age-group\">\n            <SelectValue placeholder=\"Select age group\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"18-30\">18-30 years</SelectItem>\n            <SelectItem value=\"31-45\">31-45 years</SelectItem>\n            <SelectItem value=\"46-60\">46-60 years</SelectItem>\n            <SelectItem value=\"60+\">60+ years</SelectItem>\n          </SelectContent>\n        </Select>\n        {form.formState.errors.ageGroup && (\n          <p className=\"text-destructive text-sm mt-1\">{String(form.formState.errors.ageGroup.message)}</p>\n        )}\n      </div>\n\n      <Button type=\"submit\" className=\"w-full\" disabled={isLoading} data-testid=\"button-continue-personal\">\n        Continue to Location\n      </Button>\n    </form>\n  );\n}\n\nfunction FarmLocationStep({ onNext, initialData }: any) {\n  const form = useForm({\n    resolver: zodResolver(farmLocationSchema),\n    defaultValues: initialData || {},\n  });\n\n  return (\n    <form onSubmit={form.handleSubmit(onNext)} className=\"space-y-4\" data-testid=\"farm-location-form\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"state\">State</Label>\n          <Select onValueChange={(value) => form.setValue(\"state\", value)} defaultValue={form.getValues(\"state\")}>\n            <SelectTrigger data-testid=\"select-state\">\n              <SelectValue placeholder=\"Select state\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"Maharashtra\">Maharashtra</SelectItem>\n              <SelectItem value=\"Karnataka\">Karnataka</SelectItem>\n              <SelectItem value=\"Tamil Nadu\">Tamil Nadu</SelectItem>\n              <SelectItem value=\"Andhra Pradesh\">Andhra Pradesh</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        <div>\n          <Label htmlFor=\"district\">District</Label>\n          <Select onValueChange={(value) => form.setValue(\"district\", value)} defaultValue={form.getValues(\"district\")}>\n            <SelectTrigger data-testid=\"select-district\">\n              <SelectValue placeholder=\"Select district\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"Wardha\">Wardha</SelectItem>\n              <SelectItem value=\"Nagpur\">Nagpur</SelectItem>\n              <SelectItem value=\"Akola\">Akola</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div>\n        <Label htmlFor=\"taluk\">Taluk</Label>\n        <Input\n          id=\"taluk\"\n          placeholder=\"Enter taluk name\"\n          {...form.register(\"taluk\")}\n          data-testid=\"input-taluk\"\n        />\n      </div>\n\n      <div>\n        <Label htmlFor=\"gramPanchayat\">Gram Panchayat</Label>\n        <Input\n          id=\"gramPanchayat\"\n          placeholder=\"Enter gram panchayat name\"\n          {...form.register(\"gramPanchayat\")}\n          data-testid=\"input-gram-panchayat\"\n        />\n      </div>\n\n      <div>\n        <Label htmlFor=\"village\">Village</Label>\n        <Input\n          id=\"village\"\n          placeholder=\"Enter village name\"\n          {...form.register(\"village\")}\n          data-testid=\"input-village\"\n        />\n      </div>\n\n      <div>\n        <Label htmlFor=\"farmSize\">Farm Size</Label>\n        <Select onValueChange={(value) => form.setValue(\"farmSize\", value)} defaultValue={form.getValues(\"farmSize\")}>\n          <SelectTrigger data-testid=\"select-farm-size\">\n            <SelectValue placeholder=\"Select farm size\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"0.5-1 acre\">0.5-1 acre</SelectItem>\n            <SelectItem value=\"1-2 acres\">1-2 acres</SelectItem>\n            <SelectItem value=\"2-5 acres\">2-5 acres</SelectItem>\n            <SelectItem value=\"5+ acres\">5+ acres</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <Button type=\"submit\" className=\"w-full\" data-testid=\"button-continue-location\">\n        Continue to Soil Type\n      </Button>\n    </form>\n  );\n}\n\nfunction SoilTypeStep({ onNext, initialData }: any) {\n  const form = useForm({\n    resolver: zodResolver(soilTypeSchema),\n    defaultValues: initialData || {},\n  });\n\n  return (\n    <form onSubmit={form.handleSubmit(onNext)} className=\"space-y-4\" data-testid=\"soil-type-form\">\n      <div>\n        <Label htmlFor=\"soilType\">Soil Type</Label>\n        <Select onValueChange={(value) => form.setValue(\"soilType\", value)} defaultValue={form.getValues(\"soilType\")}>\n          <SelectTrigger data-testid=\"select-soil-type\">\n            <SelectValue placeholder=\"Select soil type\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"Black Cotton Soil\">Black Cotton Soil</SelectItem>\n            <SelectItem value=\"Red Soil\">Red Soil</SelectItem>\n            <SelectItem value=\"Alluvial Soil\">Alluvial Soil</SelectItem>\n            <SelectItem value=\"Laterite Soil\">Laterite Soil</SelectItem>\n            <SelectItem value=\"Sandy Soil\">Sandy Soil</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"p-4 bg-muted/50 rounded-lg\">\n        <p className=\"text-sm text-muted-foreground\">\n          💡 If you have a Soil Health Card, you can use it to identify your exact soil type and nutrient levels.\n        </p>\n      </div>\n\n      <Button type=\"submit\" className=\"w-full\" data-testid=\"button-continue-soil\">\n        Continue to Crops\n      </Button>\n    </form>\n  );\n}\n\nfunction CropsStep({ onNext, initialData }: any) {\n  const [selectedCrops, setSelectedCrops] = useState<string[]>(initialData?.primaryCrops || []);\n\n  const availableCrops = [\n    \"Wheat\", \"Rice\", \"Maize\", \"Cotton\", \"Soybean\", \"Sugarcane\",\n    \"Tomato\", \"Onion\", \"Potato\", \"Banana\", \"Mango\", \"Grapes\"\n  ];\n\n  const toggleCrop = (crop: string) => {\n    setSelectedCrops(prev => \n      prev.includes(crop) \n        ? prev.filter(c => c !== crop)\n        : [...prev, crop]\n    );\n  };\n\n  const handleSubmit = () => {\n    if (selectedCrops.length === 0) return;\n    onNext({ primaryCrops: selectedCrops });\n  };\n\n  return (\n    <div className=\"space-y-4\" data-testid=\"crops-form\">\n      <Label>Primary Crops (Select multiple)</Label>\n      \n      <div className=\"grid grid-cols-2 gap-3\">\n        {availableCrops.map((crop) => (\n          <Button\n            key={crop}\n            type=\"button\"\n            variant={selectedCrops.includes(crop) ? \"default\" : \"outline\"}\n            onClick={() => toggleCrop(crop)}\n            className=\"h-auto p-3 justify-start\"\n            data-testid={`crop-${crop.toLowerCase()}`}\n          >\n            {crop}\n          </Button>\n        ))}\n      </div>\n\n      {selectedCrops.length > 0 && (\n        <div className=\"p-3 bg-success/10 rounded-lg\">\n          <p className=\"text-sm text-success-foreground\">\n            Selected: {selectedCrops.join(\", \")}\n          </p>\n        </div>\n      )}\n\n      <Button \n        onClick={handleSubmit} \n        className=\"w-full\" \n        disabled={selectedCrops.length === 0}\n        data-testid=\"button-continue-crops\"\n      >\n        Continue to Water Source\n      </Button>\n    </div>\n  );\n}\n\nfunction WaterSourceStep({ onNext, initialData, isLoading }: any) {\n  const form = useForm({\n    resolver: zodResolver(waterSourceSchema),\n    defaultValues: initialData || {},\n  });\n\n  return (\n    <form onSubmit={form.handleSubmit(onNext)} className=\"space-y-4\" data-testid=\"water-source-form\">\n      <div>\n        <Label htmlFor=\"waterSource\">Primary Water Source</Label>\n        <Select onValueChange={(value) => form.setValue(\"waterSource\", value)} defaultValue={form.getValues(\"waterSource\")}>\n          <SelectTrigger data-testid=\"select-water-source\">\n            <SelectValue placeholder=\"Select water source\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"Borewell\">Borewell</SelectItem>\n            <SelectItem value=\"Canal\">Canal</SelectItem>\n            <SelectItem value=\"Rain-fed\">Rain-fed</SelectItem>\n            <SelectItem value=\"River\">River</SelectItem>\n            <SelectItem value=\"Pond\">Pond</SelectItem>\n            <SelectItem value=\"Well\">Well</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"p-4 bg-accent/10 rounded-lg\">\n        <p className=\"text-sm text-accent-foreground\">\n          🌊 Your water source information helps us recommend appropriate irrigation techniques and water conservation methods.\n        </p>\n      </div>\n\n      <Button type=\"submit\" className=\"w-full\" disabled={isLoading} data-testid=\"button-complete-onboarding\">\n        {isLoading ? \"Creating Profile...\" : \"Complete Setup\"}\n      </Button>\n    </form>\n  );\n}\n","size_bytes":16026},"client/src/pages/profile.tsx":{"content":"import { useUser } from \"@/contexts/user-context\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  User, \n  MapPin, \n  Sprout, \n  Droplets, \n  Languages, \n  Bell, \n  Volume2, \n  HelpCircle,\n  LogOut,\n  Coins,\n  Star,\n  Award,\n  Users,\n  GraduationCap,\n  Trophy,\n  Recycle\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useState } from \"react\";\nimport { speakText } from \"@/lib/i18n\";\n\nexport default function Profile() {\n  const { user, farm, progress, language, setLanguage, logout } = useUser();\n  const [, setLocation] = useLocation();\n  const [notifications, setNotifications] = useState(true);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n\n  if (!user || !farm || !progress) {\n    return (\n      <div className=\"min-h-screen mobile-content flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-muted-foreground\">Please complete your profile setup</p>\n          <Button onClick={() => setLocation(\"/onboarding\")} className=\"mt-4\">\n            Complete Setup\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/\");\n  };\n\n  const handleSpeak = (text: string) => {\n    if (soundEnabled) {\n      speakText(text, language as any);\n    }\n  };\n\n  const badgeConfig = [\n    { key: \"Eco Leader\", icon: Sprout, color: \"bg-success/10 text-success\" },\n    { key: \"Water Saver\", icon: Droplets, color: \"bg-primary/10 text-primary\" },\n    { key: \"Compost Master\", icon: Recycle, color: \"bg-accent/10 text-accent\" },\n    { key: \"Community Helper\", icon: Users, color: \"bg-secondary/10 text-secondary\" },\n    { key: \"Knowledge Seeker\", icon: GraduationCap, color: \"bg-purple-100 text-purple-600\" },\n    { key: \"Top Performer\", icon: Trophy, color: \"bg-muted text-muted-foreground opacity-50\" },\n  ];\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').slice(0, 2).toUpperCase();\n  };\n\n  return (\n    <div className=\"min-h-screen mobile-content\" data-testid=\"profile-screen\">\n      <div className=\"bg-primary text-primary-foreground p-4\">\n        <h1 className=\"text-xl font-bold flex items-center\">\n          <User className=\"mr-3 h-6 w-6\" />\n          My Profile\n        </h1>\n      </div>\n\n      <div className=\"p-4 space-y-4\">\n        {/* Profile Header */}\n        <Card data-testid=\"profile-header\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"w-24 h-24 bg-accent rounded-full flex items-center justify-center mx-auto mb-4\" data-testid=\"profile-avatar\">\n              <span className=\"text-3xl font-bold text-accent-foreground\">\n                {getInitials(user.name)}\n              </span>\n            </div>\n            <h2 className=\"text-2xl font-bold\" data-testid=\"profile-name\">{user.name}</h2>\n            <p className=\"text-muted-foreground\">Sustainable Farmer • Level {progress.level}</p>\n            <div className=\"flex justify-center space-x-4 mt-4\">\n              <div className=\"text-center\" data-testid=\"profile-coins\">\n                <p className=\"text-2xl font-bold text-accent\">{progress.totalCoins.toLocaleString()}</p>\n                <p className=\"text-sm text-muted-foreground\">Coins</p>\n              </div>\n              <div className=\"text-center\" data-testid=\"profile-quests\">\n                <p className=\"text-2xl font-bold text-success\">{progress.completedQuests}</p>\n                <p className=\"text-sm text-muted-foreground\">Quests Done</p>\n              </div>\n              <div className=\"text-center\" data-testid=\"profile-badges\">\n                <p className=\"text-2xl font-bold text-secondary\">{progress.badges.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Badges</p>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              onClick={() => handleSpeak(`${user.name}, Level ${progress.level} farmer with ${progress.totalCoins} coins and ${progress.badges.length} badges`)}\n              className=\"mt-2\"\n              data-testid=\"button-speak-stats\"\n            >\n              <Volume2 className=\"h-4 w-4\" />\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Farm Details */}\n        <Card data-testid=\"farm-details\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <MapPin className=\"mr-2 h-5 w-5\" />\n              Farm Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Location</span>\n              <span data-testid=\"farm-location\">\n                {farm.village}, {farm.district}, {farm.state}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Farm Size</span>\n              <span data-testid=\"farm-size\">{farm.farmSize}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Primary Crops</span>\n              <span data-testid=\"farm-crops\">{farm.primaryCrops.join(\", \")}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Soil Type</span>\n              <span data-testid=\"farm-soil\">{farm.soilType}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Water Source</span>\n              <span data-testid=\"farm-water\">{farm.waterSource}</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Achievements & Badges */}\n        <Card data-testid=\"achievements-badges\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Award className=\"mr-2 h-5 w-5\" />\n              Badges & Achievements\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-3 gap-3\">\n              {badgeConfig.map((badge) => {\n                const Icon = badge.icon;\n                const hasEarned = progress.badges.includes(badge.key);\n                return (\n                  <div\n                    key={badge.key}\n                    className={`text-center p-3 rounded-lg ${hasEarned ? badge.color : 'bg-muted opacity-50'}`}\n                    data-testid={`badge-${badge.key.toLowerCase().replace(' ', '-')}`}\n                  >\n                    <Icon className={`mx-auto mb-2 h-8 w-8 ${hasEarned ? '' : 'text-muted-foreground'}`} />\n                    <p className=\"text-xs font-medium\">{badge.key}</p>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Settings */}\n        <Card data-testid=\"settings-preferences\">\n          <CardHeader>\n            <CardTitle>Settings & Preferences</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Language Setting */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <Languages className=\"text-muted-foreground mr-3 h-5 w-5\" />\n                <span>Language</span>\n              </div>\n              <Select value={language} onValueChange={setLanguage}>\n                <SelectTrigger className=\"w-32\" data-testid=\"language-select\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"en\">English</SelectItem>\n                  <SelectItem value=\"hi\">हिंदी</SelectItem>\n                  <SelectItem value=\"te\">తెలుగు</SelectItem>\n                  <SelectItem value=\"ta\">தமிழ்</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Notifications Setting */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <Bell className=\"text-muted-foreground mr-3 h-5 w-5\" />\n                <Label htmlFor=\"notifications\">Notifications</Label>\n              </div>\n              <Switch\n                id=\"notifications\"\n                checked={notifications}\n                onCheckedChange={setNotifications}\n                data-testid=\"notifications-toggle\"\n              />\n            </div>\n\n            {/* Audio Setting */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <Volume2 className=\"text-muted-foreground mr-3 h-5 w-5\" />\n                <Label htmlFor=\"audio\">Audio Guidance</Label>\n              </div>\n              <Switch\n                id=\"audio\"\n                checked={soundEnabled}\n                onCheckedChange={setSoundEnabled}\n                data-testid=\"audio-toggle\"\n              />\n            </div>\n\n            {/* Help & Support */}\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start p-3 h-auto\"\n              data-testid=\"button-help-support\"\n            >\n              <HelpCircle className=\"text-muted-foreground mr-3 h-5 w-5\" />\n              <div className=\"text-left\">\n                <p className=\"font-medium\">Help & Support</p>\n                <p className=\"text-xs text-muted-foreground\">Get assistance and FAQ</p>\n              </div>\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Logout Button */}\n        <Button\n          variant=\"destructive\"\n          onClick={handleLogout}\n          className=\"w-full\"\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"mr-2 h-4 w-4\" />\n          Logout\n        </Button>\n\n        {/* App Version */}\n        <div className=\"text-center text-muted-foreground text-sm py-4\" data-testid=\"app-version\">\n          <p>KrishiGrow Version 1.0.0</p>\n          <p>Made with 💚 for Indian Farmers</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10476},"client/src/pages/quests.tsx":{"content":"import { useState } from \"react\";\nimport { useUser } from \"@/contexts/user-context\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport QuestCard from \"@/components/quest-card\";\nimport { Target, Gamepad2, Brain, Sprout } from \"lucide-react\";\n\nexport default function Quests() {\n  const { user } = useUser();\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n\n  const { data: quests, isLoading: questsLoading } = useQuery({\n    queryKey: ['/api/quests'],\n  });\n\n  const { data: userQuests, isLoading: userQuestsLoading } = useQuery({\n    queryKey: ['/api/user-quests', user?.id],\n    enabled: !!user?.id,\n  });\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen mobile-content flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Please log in to view quests</p>\n      </div>\n    );\n  }\n\n  if (questsLoading || userQuestsLoading) {\n    return (\n      <div className=\"min-h-screen mobile-content flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Loading quests...</p>\n      </div>\n    );\n  }\n\n  const categories = [\n    { id: \"all\", label: \"All Quests\" },\n    { id: \"Soil Health\", label: \"Soil Health\" },\n    { id: \"Water Management\", label: \"Water Management\" },\n    { id: \"Pest Control\", label: \"Pest Control\" },\n  ];\n\n  const filteredQuests = Array.isArray(quests) ? quests.filter((quest: any) => \n    selectedCategory === \"all\" || quest.category === selectedCategory\n  ) : [];\n\n  const getUserQuest = (questId: string) => {\n    return Array.isArray(userQuests) ? userQuests.find((uq: any) => uq.questId === questId) : undefined;\n  };\n\n  return (\n    <div className=\"min-h-screen mobile-content\" data-testid=\"quests-screen\">\n      <div className=\"bg-primary text-primary-foreground p-4\">\n        <h1 className=\"text-xl font-bold flex items-center\">\n          <Target className=\"mr-3 h-6 w-6\" />\n          Sustainable Quests\n        </h1>\n        <p className=\"text-sm opacity-90 mt-1\">Complete tasks to earn rewards and improve your farm</p>\n      </div>\n\n      <div className=\"p-4 space-y-4\">\n        {/* Quest Categories */}\n        <div className=\"flex space-x-3 overflow-x-auto pb-2\">\n          {categories.map((category) => (\n            <Button\n              key={category.id}\n              variant={selectedCategory === category.id ? \"default\" : \"secondary\"}\n              onClick={() => setSelectedCategory(category.id)}\n              className=\"whitespace-nowrap\"\n              data-testid={`category-${category.id}`}\n            >\n              {category.label}\n            </Button>\n          ))}\n        </div>\n\n        {/* Quest List */}\n        <div className=\"space-y-4\">\n          {filteredQuests.map((quest: any) => (\n            <QuestCard\n              key={quest.id}\n              quest={quest}\n              userQuest={getUserQuest(quest.id)}\n              userId={user.id}\n            />\n          ))}\n        </div>\n\n        {/* Mini-Games Section */}\n        <Card data-testid=\"mini-games-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Gamepad2 className=\"text-primary mr-3 h-6 w-6\" />\n              Knowledge Games\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              <div className=\"bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg p-4 text-white\">\n                <div className=\"flex items-center mb-2\">\n                  <Brain className=\"mr-3 h-6 w-6\" />\n                  <div>\n                    <h4 className=\"font-semibold\">Pest Detective</h4>\n                    <p className=\"text-xs opacity-90\">Identify crop pests</p>\n                  </div>\n                </div>\n                <p className=\"text-xs mb-3 opacity-80\">Match pest images with correct organic treatments</p>\n                <Button \n                  variant=\"secondary\" \n                  size=\"sm\" \n                  className=\"bg-white/20 text-white hover:bg-white/30\"\n                  data-testid=\"button-pest-detective\"\n                >\n                  Play & Earn 25 XP\n                </Button>\n              </div>\n              \n              <div className=\"bg-gradient-to-r from-green-500 to-green-600 rounded-lg p-4 text-white\">\n                <div className=\"flex items-center mb-2\">\n                  <Sprout className=\"mr-3 h-6 w-6\" />\n                  <div>\n                    <h4 className=\"font-semibold\">Crop Rotation Quiz</h4>\n                    <p className=\"text-xs opacity-90\">Plan your seasons</p>\n                  </div>\n                </div>\n                <p className=\"text-xs mb-3 opacity-80\">Test your knowledge of sustainable crop rotation</p>\n                <Button \n                  variant=\"secondary\" \n                  size=\"sm\" \n                  className=\"bg-white/20 text-white hover:bg-white/30\"\n                  data-testid=\"button-crop-rotation\"\n                >\n                  Play & Earn 25 XP\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5288},"client/src/pages/schemes.tsx":{"content":"import { useUser } from \"@/contexts/user-context\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { FileText, Star, CheckCircle, Circle, Clock, Phone, MessageCircle, Tag, Coins } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Schemes() {\n  const { user } = useUser();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedTab, setSelectedTab] = useState(\"available\");\n\n  const { data: schemes, isLoading: schemesLoading } = useQuery({\n    queryKey: ['/api/schemes'],\n  });\n\n  const { data: userSchemes, isLoading: userSchemesLoading } = useQuery({\n    queryKey: ['/api/user-schemes', user?.id],\n    enabled: !!user?.id,\n  });\n\n  const applyForSchemeMutation = useMutation({\n    mutationFn: (schemeId: string) => apiRequest('POST', '/api/user-schemes', {\n      userId: user?.id,\n      schemeId,\n      status: 'in_progress',\n      applicationData: {},\n      appliedAt: new Date()\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user-schemes', user?.id] });\n      toast({\n        title: \"Application Started!\",\n        description: \"You've started the application process for this scheme.\",\n      });\n    }\n  });\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen mobile-content flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Please log in to view schemes</p>\n      </div>\n    );\n  }\n\n  if (schemesLoading || userSchemesLoading) {\n    return (\n      <div className=\"min-h-screen mobile-content flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Loading schemes...</p>\n      </div>\n    );\n  }\n\n  const tabs = [\n    { id: \"available\", label: \"Available\" },\n    { id: \"in_progress\", label: \"In Progress\" },\n    { id: \"approved\", label: \"Approved\" },\n  ];\n\n  const getUserScheme = (schemeId: string) => {\n    return Array.isArray(userSchemes) ? userSchemes.find((us: any) => us.schemeId === schemeId) : undefined;\n  };\n\n  const getFilteredSchemes = () => {\n    if (!Array.isArray(schemes)) return [];\n    \n    return schemes.filter((scheme: any) => {\n      const userScheme = getUserScheme(scheme.id);\n      \n      switch (selectedTab) {\n        case \"available\":\n          return !userScheme || userScheme.status === 'not_started';\n        case \"in_progress\":\n          return userScheme && userScheme.status === 'in_progress';\n        case \"approved\":\n          return userScheme && userScheme.status === 'approved';\n        default:\n          return true;\n      }\n    });\n  };\n\n  const getSchemeProgress = (scheme: any, userScheme: any) => {\n    if (!userScheme || userScheme.status !== 'in_progress') return 0;\n    // Simple progress calculation based on steps completed\n    return Math.floor(Math.random() * 80) + 20; // Placeholder calculation\n  };\n\n  const getStatusBadge = (scheme: any, userScheme: any) => {\n    if (!userScheme) {\n      return <Badge className=\"bg-primary/10 text-primary\">New</Badge>;\n    }\n    \n    switch (userScheme.status) {\n      case 'in_progress':\n        const progress = getSchemeProgress(scheme, userScheme);\n        return <Badge className=\"bg-accent/10 text-accent\">{progress}% Complete</Badge>;\n      case 'approved':\n        return <Badge className=\"bg-success text-success-foreground\">Approved</Badge>;\n      case 'rejected':\n        return <Badge className=\"bg-destructive text-destructive-foreground\">Rejected</Badge>;\n      default:\n        return <Badge className=\"bg-muted text-muted-foreground\">Not Started</Badge>;\n    }\n  };\n\n  const filteredSchemes = getFilteredSchemes();\n\n  return (\n    <div className=\"min-h-screen mobile-content\" data-testid=\"schemes-screen\">\n      <div className=\"bg-primary text-primary-foreground p-4\">\n        <h1 className=\"text-xl font-bold flex items-center\">\n          <FileText className=\"mr-3 h-6 w-6\" />\n          Government Schemes\n        </h1>\n        <p className=\"text-sm opacity-90 mt-1\">Quest-based application support</p>\n      </div>\n\n      <div className=\"p-4 space-y-4\">\n        {/* Scheme Categories */}\n        <div className=\"flex space-x-3 overflow-x-auto pb-2\">\n          {tabs.map((tab) => (\n            <Button\n              key={tab.id}\n              variant={selectedTab === tab.id ? \"default\" : \"secondary\"}\n              onClick={() => setSelectedTab(tab.id)}\n              className=\"whitespace-nowrap\"\n              data-testid={`tab-${tab.id}`}\n            >\n              {tab.label}\n            </Button>\n          ))}\n        </div>\n\n        {/* Schemes List */}\n        <div className=\"space-y-4\">\n          {filteredSchemes.map((scheme: any) => {\n            const userScheme = getUserScheme(scheme.id);\n            const progress = getSchemeProgress(scheme, userScheme);\n            \n            return (\n              <Card key={scheme.id} className=\"scheme-card\" data-testid={`scheme-card-${scheme.id}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex justify-between items-start mb-3\">\n                    <div>\n                      <h4 className=\"font-semibold text-lg\" data-testid={`scheme-name-${scheme.id}`}>\n                        {scheme.name}\n                      </h4>\n                      <p className=\"text-sm text-muted-foreground\">{scheme.category}</p>\n                    </div>\n                    {getStatusBadge(scheme, userScheme)}\n                  </div>\n                  \n                  <p className=\"text-sm text-muted-foreground mb-4\" data-testid={`scheme-description-${scheme.id}`}>\n                    {scheme.description}\n                  </p>\n                  \n                  <div className=\"mb-4\">\n                    <p className=\"font-medium text-sm mb-2\">Benefits:</p>\n                    <p className=\"text-sm text-muted-foreground\">{scheme.benefits}</p>\n                  </div>\n                  \n                  {userScheme?.status === 'in_progress' && (\n                    <>\n                      <div className=\"mb-4\">\n                        <div className=\"flex justify-between text-sm mb-2\">\n                          <span>Application Progress</span>\n                          <span data-testid={`scheme-progress-${scheme.id}`}>\n                            {Math.floor(progress / (100 / scheme.applicationSteps.length))} of {scheme.applicationSteps.length} steps completed\n                          </span>\n                        </div>\n                        <Progress value={progress} className=\"mb-4\" />\n                      </div>\n                      \n                      <div className=\"space-y-2 mb-4\">\n                        {scheme.applicationSteps.map((step: string, index: number) => {\n                          const isCompleted = index < Math.floor(progress / (100 / scheme.applicationSteps.length));\n                          const isCurrent = index === Math.floor(progress / (100 / scheme.applicationSteps.length));\n                          \n                          return (\n                            <div key={index} className=\"flex items-center text-sm\" data-testid={`scheme-step-${index}`}>\n                              {isCompleted ? (\n                                <CheckCircle className=\"text-success mr-2 h-4 w-4\" />\n                              ) : isCurrent ? (\n                                <Clock className=\"text-accent mr-2 h-4 w-4\" />\n                              ) : (\n                                <Circle className=\"text-muted-foreground mr-2 h-4 w-4\" />\n                              )}\n                              <span className={`${isCompleted ? 'line-through text-muted-foreground' : isCurrent ? 'font-medium text-accent' : ''}`}>\n                                {step}\n                              </span>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </>\n                  )}\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"flex space-x-4 text-sm\">\n                      <span className=\"flex items-center\" data-testid={`scheme-coin-reward-${scheme.id}`}>\n                        <Coins className=\"text-accent mr-1 h-4 w-4\" />\n                        200 coins reward\n                      </span>\n                      <span className=\"flex items-center\">\n                        <Tag className=\"text-primary mr-1 h-4 w-4\" />\n                        Scheme Certified Badge\n                      </span>\n                    </div>\n                    \n                    <div>\n                      {!userScheme ? (\n                        <Button\n                          onClick={() => applyForSchemeMutation.mutate(scheme.id)}\n                          disabled={applyForSchemeMutation.isPending}\n                          className=\"bg-primary text-primary-foreground\"\n                          data-testid={`button-start-application-${scheme.id}`}\n                        >\n                          Start Application\n                        </Button>\n                      ) : userScheme.status === 'approved' ? (\n                        <Button disabled className=\"bg-success text-success-foreground\">\n                          Approved ✓\n                        </Button>\n                      ) : userScheme.status === 'in_progress' ? (\n                        <Button\n                          className=\"bg-accent text-accent-foreground\"\n                          data-testid={`button-continue-application-${scheme.id}`}\n                        >\n                          Continue Quest\n                        </Button>\n                      ) : (\n                        <Button disabled className=\"bg-muted text-muted-foreground\">\n                          Processing...\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n          \n          {filteredSchemes.length === 0 && (\n            <div className=\"text-center py-12\">\n              <FileText className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n              <p className=\"text-muted-foreground mb-2\">No schemes found</p>\n              <p className=\"text-sm text-muted-foreground\">\n                {selectedTab === \"available\" \n                  ? \"All available schemes have been applied for\" \n                  : `No schemes in ${selectedTab.replace('_', ' ')} status`\n                }\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Help & Support */}\n        <Card data-testid=\"help-support-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <MessageCircle className=\"text-primary mr-2 h-5 w-5\" />\n              Need Help?\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              <Button \n                variant=\"outline\" \n                className=\"flex items-center p-3 h-auto justify-start\"\n                data-testid=\"button-call-support\"\n              >\n                <Phone className=\"text-success mr-3 h-5 w-5\" />\n                <div className=\"text-left\">\n                  <p className=\"font-medium\">Call Support</p>\n                  <p className=\"text-xs text-muted-foreground\">1800-XXX-XXXX</p>\n                </div>\n              </Button>\n              \n              <Button \n                variant=\"outline\" \n                className=\"flex items-center p-3 h-auto justify-start\"\n                data-testid=\"button-chat-support\"\n              >\n                <MessageCircle className=\"text-primary mr-3 h-5 w-5\" />\n                <div className=\"text-left\">\n                  <p className=\"font-medium\">Chat Support</p>\n                  <p className=\"text-xs text-muted-foreground\">Get instant help</p>\n                </div>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12459},"client/src/pages/welcome.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useUser } from \"@/contexts/user-context\";\nimport { Button } from \"@/components/ui/button\";\nimport { t, LanguageCode } from \"@/lib/i18n\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Sprout } from \"lucide-react\";\nimport { useEffect } from \"react\";\n\nexport default function Welcome() {\n  const [, setLocation] = useLocation();\n  const { user, language, setLanguage } = useUser();\n\n  // Redirect to dashboard if user is already logged in\n  useEffect(() => {\n    if (user) {\n      setLocation(\"/dashboard\");\n    }\n  }, [user, setLocation]);\n\n  return (\n    <div className=\"min-h-screen flex flex-col\" data-testid=\"welcome-screen\">\n      {/* Language Selection Header */}\n      <div className=\"bg-primary text-primary-foreground p-4 flex justify-between items-center\">\n        <h1 className=\"text-xl font-bold\" data-testid=\"app-title\">KrishiGrow</h1>\n        <Select value={language} onValueChange={setLanguage}>\n          <SelectTrigger className=\"bg-primary-foreground text-primary w-24\" data-testid=\"language-selector\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"en\">English</SelectItem>\n            <SelectItem value=\"hi\">हिंदी</SelectItem>\n            <SelectItem value=\"te\">తెలుగు</SelectItem>\n            <SelectItem value=\"ta\">தமிழ்</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      \n      <div className=\"flex-1 flex flex-col justify-center items-center p-6 text-center\">\n        {/* Agricultural landscape image placeholder */}\n        <div className=\"mb-8\">\n          <div className=\"w-full max-w-md h-48 bg-gradient-to-r from-green-400 to-green-600 rounded-2xl shadow-lg flex items-center justify-center\">\n            <img \n              src=\"https://images.unsplash.com/photo-1574943320219-553eb213f72d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\" \n              alt=\"Beautiful green farmland with sustainable farming practices\" \n              className=\"rounded-2xl shadow-lg w-full h-full object-cover\"\n              data-testid=\"hero-image\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"w-16 h-16 bg-success rounded-full flex items-center justify-center mb-6 animate-pulse-glow\" data-testid=\"main-icon\">\n          <Sprout className=\"text-success-foreground h-8 w-8\" />\n        </div>\n        \n        <h1 className=\"text-3xl font-bold text-primary mb-4\" data-testid=\"welcome-title\">\n          {t(\"welcome\", language as LanguageCode)}\n        </h1>\n        <p className=\"text-lg text-muted-foreground mb-2\">Grow Sustainably, Earn Rewards</p>\n        <p className=\"text-muted-foreground mb-8 max-w-md\">\n          Transform your farming with gamified quests, community support, and smart agricultural guidance.\n        </p>\n        \n        <div className=\"space-y-3 w-full max-w-sm\">\n          <Button\n            onClick={() => setLocation(\"/onboarding\")}\n            className=\"w-full bg-primary text-primary-foreground py-4 px-6 text-lg hover:bg-primary/90\"\n            size=\"lg\"\n            data-testid=\"button-get-started\"\n          >\n            {t(\"getStarted\", language as LanguageCode)}\n          </Button>\n          <Button\n            onClick={() => setLocation(\"/dashboard\")}\n            variant=\"outline\"\n            className=\"w-full py-4 px-6 text-lg border-border hover:bg-muted\"\n            size=\"lg\"\n            data-testid=\"button-existing-account\"\n          >\n            {t(\"alreadyHaveAccount\", language as LanguageCode)}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3700},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}